<?php
/**
 * Shipment
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * The version of the OpenAPI document: 2024-03-20
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024;

use ArrayAccess;
use Plenty\AmazonPHP\SellingPartner\ObjectSerializer2024;

/**
 * Shipment Class Doc Comment
 *
 * @category Class
 * @description Contains information pertaining to a shipment in an inbound plan.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Shipment implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'Shipment';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'amazon_reference_id' => 'string',
        'contact_information' => '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ContactInformation',
        'dates' => '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\Dates',
        'destination' => '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ShipmentDestination',
        'freight_information' => '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\FreightInformation',
        'name' => 'string',
        'placement_option_id' => 'string',
        'selected_delivery_window' => '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\SelectedDeliveryWindow',
        'selected_transportation_option_id' => 'string',
        'self_ship_appointment_details' => '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\SelfShipAppointmentDetails[]',
        'shipment_confirmation_id' => 'string',
        'shipment_id' => 'string',
        'source' => '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ShipmentSource',
        'status' => 'string',
        'tracking_details' => '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\TrackingDetails'
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     * @phpstan-var array<string, string|null>
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'amazon_reference_id' => null,
        'contact_information' => null,
        'dates' => null,
        'destination' => null,
        'freight_information' => null,
        'name' => null,
        'placement_option_id' => null,
        'selected_delivery_window' => null,
        'selected_transportation_option_id' => null,
        'self_ship_appointment_details' => null,
        'shipment_confirmation_id' => null,
        'shipment_id' => null,
        'source' => null,
        'status' => null,
        'tracking_details' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amazon_reference_id' => 'amazonReferenceId',
        'contact_information' => 'contactInformation',
        'dates' => 'dates',
        'destination' => 'destination',
        'freight_information' => 'freightInformation',
        'name' => 'name',
        'placement_option_id' => 'placementOptionId',
        'selected_delivery_window' => 'selectedDeliveryWindow',
        'selected_transportation_option_id' => 'selectedTransportationOptionId',
        'self_ship_appointment_details' => 'selfShipAppointmentDetails',
        'shipment_confirmation_id' => 'shipmentConfirmationId',
        'shipment_id' => 'shipmentId',
        'source' => 'source',
        'status' => 'status',
        'tracking_details' => 'trackingDetails'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amazon_reference_id' => 'setAmazonReferenceId',
        'contact_information' => 'setContactInformation',
        'dates' => 'setDates',
        'destination' => 'setDestination',
        'freight_information' => 'setFreightInformation',
        'name' => 'setName',
        'placement_option_id' => 'setPlacementOptionId',
        'selected_delivery_window' => 'setSelectedDeliveryWindow',
        'selected_transportation_option_id' => 'setSelectedTransportationOptionId',
        'self_ship_appointment_details' => 'setSelfShipAppointmentDetails',
        'shipment_confirmation_id' => 'setShipmentConfirmationId',
        'shipment_id' => 'setShipmentId',
        'source' => 'setSource',
        'status' => 'setStatus',
        'tracking_details' => 'setTrackingDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amazon_reference_id' => 'getAmazonReferenceId',
        'contact_information' => 'getContactInformation',
        'dates' => 'getDates',
        'destination' => 'getDestination',
        'freight_information' => 'getFreightInformation',
        'name' => 'getName',
        'placement_option_id' => 'getPlacementOptionId',
        'selected_delivery_window' => 'getSelectedDeliveryWindow',
        'selected_transportation_option_id' => 'getSelectedTransportationOptionId',
        'self_ship_appointment_details' => 'getSelfShipAppointmentDetails',
        'shipment_confirmation_id' => 'getShipmentConfirmationId',
        'shipment_id' => 'getShipmentId',
        'source' => 'getSource',
        'status' => 'getStatus',
        'tracking_details' => 'getTrackingDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['amazon_reference_id'] = $data['amazon_reference_id'] ?? null;
        $this->container['contact_information'] = $data['contact_information'] ?? null;
        $this->container['dates'] = $data['dates'] ?? null;
        $this->container['destination'] = $data['destination'] ?? null;
        $this->container['freight_information'] = $data['freight_information'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['placement_option_id'] = $data['placement_option_id'] ?? null;
        $this->container['selected_delivery_window'] = $data['selected_delivery_window'] ?? null;
        $this->container['selected_transportation_option_id'] = $data['selected_transportation_option_id'] ?? null;
        $this->container['self_ship_appointment_details'] = $data['self_ship_appointment_details'] ?? null;
        $this->container['shipment_confirmation_id'] = $data['shipment_confirmation_id'] ?? null;
        $this->container['shipment_id'] = $data['shipment_id'] ?? null;
        $this->container['source'] = $data['source'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['tracking_details'] = $data['tracking_details'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (!is_null($this->container['amazon_reference_id']) && (mb_strlen(
                    $this->container['amazon_reference_id']
                ) > 1024)) {
            $invalidProperties[] = "invalid value for 'amazon_reference_id', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['amazon_reference_id']) && (mb_strlen(
                    $this->container['amazon_reference_id']
                ) < 1)) {
            $invalidProperties[] = "invalid value for 'amazon_reference_id', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['destination'] === null) {
            $invalidProperties[] = "'destination' can't be null";
        }
        if ($this->container['placement_option_id'] === null) {
            $invalidProperties[] = "'placement_option_id' can't be null";
        }
        if ((mb_strlen($this->container['placement_option_id']) > 38)) {
            $invalidProperties[] = "invalid value for 'placement_option_id', the character length must be smaller than or equal to 38.";
        }

        if ((mb_strlen($this->container['placement_option_id']) < 38)) {
            $invalidProperties[] = "invalid value for 'placement_option_id', the character length must be bigger than or equal to 38.";
        }

        if (!preg_match("/^[a-zA-Z0-9-]*$/", $this->container['placement_option_id'])) {
            $invalidProperties[] = "invalid value for 'placement_option_id', must be conform to the pattern /^[a-zA-Z0-9-]*$/.";
        }

        if (!is_null($this->container['selected_transportation_option_id']) && (mb_strlen(
                    $this->container['selected_transportation_option_id']
                ) > 38)) {
            $invalidProperties[] = "invalid value for 'selected_transportation_option_id', the character length must be smaller than or equal to 38.";
        }

        if (!is_null($this->container['selected_transportation_option_id']) && (mb_strlen(
                    $this->container['selected_transportation_option_id']
                ) < 38)) {
            $invalidProperties[] = "invalid value for 'selected_transportation_option_id', the character length must be bigger than or equal to 38.";
        }

        if (!is_null($this->container['selected_transportation_option_id']) && !preg_match(
                "/^[a-zA-Z0-9-]*$/",
                $this->container['selected_transportation_option_id']
            )) {
            $invalidProperties[] = "invalid value for 'selected_transportation_option_id', must be conform to the pattern /^[a-zA-Z0-9-]*$/.";
        }

        if (!is_null($this->container['shipment_confirmation_id']) && (mb_strlen(
                    $this->container['shipment_confirmation_id']
                ) > 1024)) {
            $invalidProperties[] = "invalid value for 'shipment_confirmation_id', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['shipment_confirmation_id']) && (mb_strlen(
                    $this->container['shipment_confirmation_id']
                ) < 1)) {
            $invalidProperties[] = "invalid value for 'shipment_confirmation_id', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['shipment_id'] === null) {
            $invalidProperties[] = "'shipment_id' can't be null";
        }
        if ((mb_strlen($this->container['shipment_id']) > 38)) {
            $invalidProperties[] = "invalid value for 'shipment_id', the character length must be smaller than or equal to 38.";
        }

        if ((mb_strlen($this->container['shipment_id']) < 38)) {
            $invalidProperties[] = "invalid value for 'shipment_id', the character length must be bigger than or equal to 38.";
        }

        if (!preg_match("/^[a-zA-Z0-9-]*$/", $this->container['shipment_id'])) {
            $invalidProperties[] = "invalid value for 'shipment_id', must be conform to the pattern /^[a-zA-Z0-9-]*$/.";
        }

        if ($this->container['source'] === null) {
            $invalidProperties[] = "'source' can't be null";
        }
        if (!is_null($this->container['status']) && (mb_strlen($this->container['status']) > 1024)) {
            $invalidProperties[] = "invalid value for 'status', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['status']) && (mb_strlen($this->container['status']) < 1)) {
            $invalidProperties[] = "invalid value for 'status', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amazon_reference_id
     *
     * @return string|null
     */
    public function getAmazonReferenceId(): ?string
    {
        return $this->container['amazon_reference_id'];
    }

    /**
     * Sets amazon_reference_id
     *
     * @param string|null $amazon_reference_id A unique identifier created by Amazon that identifies this Amazon-partnered, Less Than Truckload/Full Truckload (LTL/FTL) shipment.
     *
     * @return self
     */
    public function setAmazonReferenceId($amazon_reference_id): static
    {
        if (!is_null($amazon_reference_id) && (mb_strlen($amazon_reference_id) > 1024)) {
            throw new \InvalidArgumentException(
                'invalid length for $amazon_reference_id when calling Shipment., must be smaller than or equal to 1024.'
            );
        }
        if (!is_null($amazon_reference_id) && (mb_strlen($amazon_reference_id) < 1)) {
            throw new \InvalidArgumentException(
                'invalid length for $amazon_reference_id when calling Shipment., must be bigger than or equal to 1.'
            );
        }

        $this->container['amazon_reference_id'] = $amazon_reference_id;

        return $this;
    }

    /**
     * Gets contact_information
     *
     * @return \Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ContactInformation|null
     */
    public function getContactInformation(): ?ContactInformation
    {
        return $this->container['contact_information'];
    }

    /**
     * Sets contact_information
     *
     * @param \Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ContactInformation|null $contact_information contact_information
     *
     * @return self
     */
    public function setContactInformation($contact_information): static
    {
        $this->container['contact_information'] = $contact_information;

        return $this;
    }

    /**
     * Gets dates
     *
     * @return \Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\Dates|null
     */
    public function getDates(): ?Dates
    {
        return $this->container['dates'];
    }

    /**
     * Sets dates
     *
     * @param \Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\Dates|null $dates dates
     *
     * @return self
     */
    public function setDates($dates): static
    {
        $this->container['dates'] = $dates;

        return $this;
    }

    /**
     * Gets destination
     *
     * @return \Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ShipmentDestination
     */
    public function getDestination(): ShipmentDestination
    {
        return $this->container['destination'];
    }

    /**
     * Sets destination
     *
     * @param \Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ShipmentDestination $destination destination
     *
     * @return self
     */
    public function setDestination($destination): static
    {
        $this->container['destination'] = $destination;

        return $this;
    }

    /**
     * Gets freight_information
     *
     * @return \Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\FreightInformation|null
     */
    public function getFreightInformation(): ?FreightInformation
    {
        return $this->container['freight_information'];
    }

    /**
     * Sets freight_information
     *
     * @param \Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\FreightInformation|null $freight_information freight_information
     *
     * @return self
     */
    public function setFreightInformation($freight_information): static
    {
        $this->container['freight_information'] = $freight_information;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The name of the shipment.
     *
     * @return self
     */
    public function setName($name): static
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets placement_option_id
     *
     * @return string
     */
    public function getPlacementOptionId(): string
    {
        return $this->container['placement_option_id'];
    }

    /**
     * Sets placement_option_id
     *
     * @param string $placement_option_id The identifier of a placement option. A placement option represents the shipment splits and destinations of SKUs.
     *
     * @return self
     */
    public function setPlacementOptionId($placement_option_id): static
    {
        if ((mb_strlen($placement_option_id) > 38)) {
            throw new \InvalidArgumentException(
                'invalid length for $placement_option_id when calling Shipment., must be smaller than or equal to 38.'
            );
        }
        if ((mb_strlen($placement_option_id) < 38)) {
            throw new \InvalidArgumentException(
                'invalid length for $placement_option_id when calling Shipment., must be bigger than or equal to 38.'
            );
        }
        if ((!preg_match("/^[a-zA-Z0-9-]*$/", $placement_option_id))) {
            throw new \InvalidArgumentException(
                "invalid value for $placement_option_id when calling Shipment., must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        $this->container['placement_option_id'] = $placement_option_id;

        return $this;
    }

    /**
     * Gets selected_delivery_window
     *
     * @return \Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\SelectedDeliveryWindow|null
     */
    public function getSelectedDeliveryWindow(): ?SelectedDeliveryWindow
    {
        return $this->container['selected_delivery_window'];
    }

    /**
     * Sets selected_delivery_window
     *
     * @param \Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\SelectedDeliveryWindow|null $selected_delivery_window selected_delivery_window
     *
     * @return self
     */
    public function setSelectedDeliveryWindow($selected_delivery_window): static
    {
        $this->container['selected_delivery_window'] = $selected_delivery_window;

        return $this;
    }

    /**
     * Gets selected_transportation_option_id
     *
     * @return string|null
     */
    public function getSelectedTransportationOptionId(): ?string
    {
        return $this->container['selected_transportation_option_id'];
    }

    /**
     * Sets selected_transportation_option_id
     *
     * @param string|null $selected_transportation_option_id Identifier of a transportation option. A transportation option represent one option for how to send a shipment.
     *
     * @return self
     */
    public function setSelectedTransportationOptionId($selected_transportation_option_id): static
    {
        if (!is_null($selected_transportation_option_id) && (mb_strlen($selected_transportation_option_id) > 38)) {
            throw new \InvalidArgumentException(
                'invalid length for $selected_transportation_option_id when calling Shipment., must be smaller than or equal to 38.'
            );
        }
        if (!is_null($selected_transportation_option_id) && (mb_strlen($selected_transportation_option_id) < 38)) {
            throw new \InvalidArgumentException(
                'invalid length for $selected_transportation_option_id when calling Shipment., must be bigger than or equal to 38.'
            );
        }
        if (!is_null($selected_transportation_option_id) && (!preg_match(
                "/^[a-zA-Z0-9-]*$/",
                $selected_transportation_option_id
            ))) {
            throw new \InvalidArgumentException(
                "invalid value for $selected_transportation_option_id when calling Shipment., must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        $this->container['selected_transportation_option_id'] = $selected_transportation_option_id;

        return $this;
    }

    /**
     * Gets self_ship_appointment_details
     *
     * @return \Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\SelfShipAppointmentDetails[]|null
     */
    public function getSelfShipAppointmentDetails(): ?array
    {
        return $this->container['self_ship_appointment_details'];
    }

    /**
     * Sets self_ship_appointment_details
     *
     * @param \Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\SelfShipAppointmentDetails[]|null $self_ship_appointment_details List of self ship appointment details.
     *
     * @return self
     */
    public function setSelfShipAppointmentDetails($self_ship_appointment_details): static
    {
        $this->container['self_ship_appointment_details'] = $self_ship_appointment_details;

        return $this;
    }

    /**
     * Gets shipment_confirmation_id
     *
     * @return string|null
     */
    public function getShipmentConfirmationId(): ?string
    {
        return $this->container['shipment_confirmation_id'];
    }

    /**
     * Sets shipment_confirmation_id
     *
     * @param string|null $shipment_confirmation_id The confirmed shipment ID which shows up on labels (for example, `FBA1234ABCD`).
     *
     * @return self
     */
    public function setShipmentConfirmationId($shipment_confirmation_id): static
    {
        if (!is_null($shipment_confirmation_id) && (mb_strlen($shipment_confirmation_id) > 1024)) {
            throw new \InvalidArgumentException(
                'invalid length for $shipment_confirmation_id when calling Shipment., must be smaller than or equal to 1024.'
            );
        }
        if (!is_null($shipment_confirmation_id) && (mb_strlen($shipment_confirmation_id) < 1)) {
            throw new \InvalidArgumentException(
                'invalid length for $shipment_confirmation_id when calling Shipment., must be bigger than or equal to 1.'
            );
        }

        $this->container['shipment_confirmation_id'] = $shipment_confirmation_id;

        return $this;
    }

    /**
     * Gets shipment_id
     *
     * @return string
     */
    public function getShipmentId(): string
    {
        return $this->container['shipment_id'];
    }

    /**
     * Sets shipment_id
     *
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded.
     *
     * @return self
     */
    public function setShipmentId($shipment_id): static
    {
        if ((mb_strlen($shipment_id) > 38)) {
            throw new \InvalidArgumentException(
                'invalid length for $shipment_id when calling Shipment., must be smaller than or equal to 38.'
            );
        }
        if ((mb_strlen($shipment_id) < 38)) {
            throw new \InvalidArgumentException(
                'invalid length for $shipment_id when calling Shipment., must be bigger than or equal to 38.'
            );
        }
        if ((!preg_match("/^[a-zA-Z0-9-]*$/", $shipment_id))) {
            throw new \InvalidArgumentException(
                "invalid value for $shipment_id when calling Shipment., must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        $this->container['shipment_id'] = $shipment_id;

        return $this;
    }

    /**
     * Gets source
     *
     * @return \Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ShipmentSource
     */
    public function getSource(): ShipmentSource
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param \Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ShipmentSource $source source
     *
     * @return self
     */
    public function setSource($source): static
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus(): ?string
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status The status of a shipment. The state of the shipment will typically start in `WORKING` and transition to `READY_TO_SHIP` once required actions are complete prior to being picked up or shipped out. Can be `ABANDONED`, `CANCELLED`, `CHECKED_IN`, `CLOSED`, `DELETED`, `DELIVERED`, `IN_TRANSIT`, `MIXED`, `READY_TO_SHIP`, `RECEIVING`, `SHIPPED`, or `WORKING`.
     *
     * @return self
     */
    public function setStatus($status): static
    {
        if (!is_null($status) && (mb_strlen($status) > 1024)) {
            throw new \InvalidArgumentException(
                'invalid length for $status when calling Shipment., must be smaller than or equal to 1024.'
            );
        }
        if (!is_null($status) && (mb_strlen($status) < 1)) {
            throw new \InvalidArgumentException(
                'invalid length for $status when calling Shipment., must be bigger than or equal to 1.'
            );
        }

        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets tracking_details
     *
     * @return \Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\TrackingDetails|null
     */
    public function getTrackingDetails(): ?TrackingDetails
    {
        return $this->container['tracking_details'];
    }

    /**
     * Sets tracking_details
     *
     * @param \Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\TrackingDetails|null $tracking_details tracking_details
     *
     * @return self
     */
    public function setTrackingDetails($tracking_details): static
    {
        $this->container['tracking_details'] = $tracking_details;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed $value Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer2024::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer2024::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer2024::sanitizeForSerialization($this));
    }
}


