<?php
/**
 * FbaInboundApi
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * The version of the OpenAPI document: 2024-03-20
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Plenty\AmazonPHP\SellingPartner\Api\FbaInboundApi;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Promise\PromiseInterface;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use InvalidArgumentException;
use Plenty\AmazonPHP\SellingPartner\Configuration2024;
use Plenty\AmazonPHP\SellingPartner\Exception\ApiException;
use Plenty\AmazonPHP\SellingPartner\HeaderSelector2024;
use Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\CancelInboundPlanResponse;
use Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\CancelSelfShipAppointmentRequest;
use Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\CancelSelfShipAppointmentResponse;
use Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ConfirmDeliveryWindowOptionsResponse;
use Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ConfirmPackingOptionResponse;
use Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ConfirmPlacementOptionResponse;
use Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ConfirmShipmentContentUpdatePreviewResponse;
use Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ConfirmTransportationOptionsRequest;
use Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ConfirmTransportationOptionsResponse;
use Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ContentUpdatePreview;
use Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\CreateInboundPlanRequest;
use Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\CreateInboundPlanResponse;
use Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\CreateMarketplaceItemLabelsRequest;
use Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\CreateMarketplaceItemLabelsResponse;
use Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList;
use Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\GenerateDeliveryWindowOptionsResponse;
use Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\GeneratePackingOptionsResponse;
use Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\GeneratePlacementOptionsRequest;
use Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\GeneratePlacementOptionsResponse;
use Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\GenerateSelfShipAppointmentSlotsRequest;
use Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\GenerateSelfShipAppointmentSlotsResponse;
use Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\GenerateShipmentContentUpdatePreviewsRequest;
use Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\GenerateShipmentContentUpdatePreviewsResponse;
use Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\GenerateTransportationOptionsRequest;
use Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\GenerateTransportationOptionsResponse;
use Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\GetDeliveryChallanDocumentResponse;
use Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\GetSelfShipAppointmentSlotsResponse;
use Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\InboundOperationStatus;
use Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\InboundPlan;
use Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListDeliveryWindowOptionsResponse;
use Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListInboundPlanBoxesResponse;
use Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListInboundPlanItemsResponse;
use Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListInboundPlanPalletsResponse;
use Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListInboundPlansResponse;
use Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListItemComplianceDetailsResponse;
use Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListPackingGroupBoxesResponse;
use Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListPackingGroupItemsResponse;
use Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListPackingOptionsResponse;
use Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListPlacementOptionsResponse;
use Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListShipmentBoxesResponse;
use Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListShipmentContentUpdatePreviewsResponse;
use Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListShipmentItemsResponse;
use Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListShipmentPalletsResponse;
use Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListTransportationOptionsResponse;
use Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ScheduleSelfShipAppointmentRequest;
use Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ScheduleSelfShipAppointmentResponse;
use Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\SetPackingInformationRequest;
use Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\SetPackingInformationResponse;
use Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\Shipment;
use Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\UpdateInboundPlanNameRequest;
use Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\UpdateItemComplianceDetailsRequest;
use Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\UpdateItemComplianceDetailsResponse;
use Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\UpdateShipmentNameRequest;
use Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\UpdateShipmentSourceAddressRequest;
use Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\UpdateShipmentSourceAddressResponse;
use Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\UpdateShipmentTrackingDetailsRequest;
use Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\UpdateShipmentTrackingDetailsResponse;
use Plenty\AmazonPHP\SellingPartner\ObjectSerializer2024;
use RuntimeException;

use function GuzzleHttp\Psr7\build_query;

class FulfillmentInboundSDK2024
{

    public const API_NAME = 'FulfillmentInbound';
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration2024
     */
    protected $config;

    /**
     * @var HeaderSelector2024
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration2024 $config
     * @param HeaderSelector2024 $selector
     * @param int $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration2024 $config = null,
        HeaderSelector2024 $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration2024();
        $this->headerSelector = $selector ?: new HeaderSelector2024();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration2024
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation cancelInboundPlan
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     *
     * @return CancelInboundPlanResponse|ErrorList|
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function cancelInboundPlan($inbound_plan_id)
    {
        list($response) = $this->cancelInboundPlanWithHttpInfo($inbound_plan_id);
        return $response;
    }

    /**
     * Operation cancelInboundPlanWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     *
     * @return array of CancelInboundPlanResponse|ErrorList, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function cancelInboundPlanWithHttpInfo($inbound_plan_id)
    {
        $request = $this->cancelInboundPlanRequest($inbound_plan_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            switch ($statusCode) {
                case 202:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\CancelInboundPlanResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\CancelInboundPlanResponse',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                case 403:
                case 404:
                case 413:
                case 415:
                case 429:
                case 500:
                case 503:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\CancelInboundPlanResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string)$response->getBody();
            }

            return [
                ObjectSerializer2024::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\CancelInboundPlanResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cancelInboundPlanAsync
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function cancelInboundPlanAsync($inbound_plan_id)
    {
        return $this->cancelInboundPlanAsyncWithHttpInfo($inbound_plan_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelInboundPlanAsyncWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function cancelInboundPlanAsyncWithHttpInfo($inbound_plan_id)
    {
        $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\CancelInboundPlanResponse';
        $request = $this->cancelInboundPlanRequest($inbound_plan_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelInboundPlan'
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws InvalidArgumentException
     */
    public function cancelInboundPlanRequest($inbound_plan_id)
    {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling cancelInboundPlan'
            );
        }
        if (strlen($inbound_plan_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.cancelInboundPlan, must be smaller than or equal to 38.'
            );
        }
        if (strlen($inbound_plan_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.cancelInboundPlan, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inbound_plan_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"inbound_plan_id\" when calling FbaInboundApi.cancelInboundPlan, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }


        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/cancellation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer2024::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cancelSelfShipAppointment
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param CancelSelfShipAppointmentRequest $body The body of the request to &#x60;cancelSelfShipAppointment&#x60;. (required)
     *
     * @return CancelSelfShipAppointmentResponse|ErrorList
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function cancelSelfShipAppointment($inbound_plan_id, $shipment_id, $body)
    {
        list($response) = $this->cancelSelfShipAppointmentWithHttpInfo($inbound_plan_id, $shipment_id, $body);
        return $response;
    }

    /**
     * Operation cancelSelfShipAppointmentWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param CancelSelfShipAppointmentRequest $body The body of the request to &#x60;cancelSelfShipAppointment&#x60;. (required)
     *
     * @return array of CancelSelfShipAppointmentResponse|ErrorList, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function cancelSelfShipAppointmentWithHttpInfo($inbound_plan_id, $shipment_id, $body)
    {
        $request = $this->cancelSelfShipAppointmentRequest($inbound_plan_id, $shipment_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            switch ($statusCode) {
                case 202:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\CancelSelfShipAppointmentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\CancelSelfShipAppointmentResponse',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\CancelSelfShipAppointmentResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string)$response->getBody();
            }

            return [
                ObjectSerializer2024::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\CancelSelfShipAppointmentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cancelSelfShipAppointmentAsync
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param CancelSelfShipAppointmentRequest $body The body of the request to &#x60;cancelSelfShipAppointment&#x60;. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function cancelSelfShipAppointmentAsync($inbound_plan_id, $shipment_id, $body)
    {
        return $this->cancelSelfShipAppointmentAsyncWithHttpInfo($inbound_plan_id, $shipment_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelSelfShipAppointmentAsyncWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param CancelSelfShipAppointmentRequest $body The body of the request to &#x60;cancelSelfShipAppointment&#x60;. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function cancelSelfShipAppointmentAsyncWithHttpInfo($inbound_plan_id, $shipment_id, $body)
    {
        $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\CancelSelfShipAppointmentResponse';
        $request = $this->cancelSelfShipAppointmentRequest($inbound_plan_id, $shipment_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelSelfShipAppointment'
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param CancelSelfShipAppointmentRequest $body The body of the request to &#x60;cancelSelfShipAppointment&#x60;. (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws InvalidArgumentException
     */
    public function cancelSelfShipAppointmentRequest($inbound_plan_id, $shipment_id, $body)
    {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling cancelSelfShipAppointment'
            );
        }
        if (strlen($inbound_plan_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.cancelSelfShipAppointment, must be smaller than or equal to 38.'
            );
        }
        if (strlen($inbound_plan_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.cancelSelfShipAppointment, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inbound_plan_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"inbound_plan_id\" when calling FbaInboundApi.cancelSelfShipAppointment, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling cancelSelfShipAppointment'
            );
        }
        if (strlen($shipment_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$shipment_id" when calling FbaInboundApi.cancelSelfShipAppointment, must be smaller than or equal to 38.'
            );
        }
        if (strlen($shipment_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$shipment_id" when calling FbaInboundApi.cancelSelfShipAppointment, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $shipment_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"shipment_id\" when calling FbaInboundApi.cancelSelfShipAppointment, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling cancelSelfShipAppointment'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/selfShipAppointmentCancellation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer2024::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }
        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer2024::toPathValue($shipment_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer2024::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation confirmDeliveryWindowOptions
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id The shipment to confirm the delivery window option for. (required)
     * @param string $delivery_window_option_id The id of the delivery window option to be confirmed. (required)
     *
     * @return ConfirmDeliveryWindowOptionsResponse| ErrorList
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function confirmDeliveryWindowOptions($inbound_plan_id, $shipment_id, $delivery_window_option_id)
    {
        list($response) = $this->confirmDeliveryWindowOptionsWithHttpInfo(
            $inbound_plan_id,
            $shipment_id,
            $delivery_window_option_id
        );
        return $response;
    }

    /**
     * Operation confirmDeliveryWindowOptionsWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id The shipment to confirm the delivery window option for. (required)
     * @param string $delivery_window_option_id The id of the delivery window option to be confirmed. (required)
     *
     * @return array of  ConfirmDeliveryWindowOptionsResponse| ErrorList| ErrorList| ErrorList| ErrorList| ErrorList| ErrorList| ErrorList| ErrorList, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function confirmDeliveryWindowOptionsWithHttpInfo($inbound_plan_id, $shipment_id, $delivery_window_option_id)
    {
        $request = $this->confirmDeliveryWindowOptionsRequest(
            $inbound_plan_id,
            $shipment_id,
            $delivery_window_option_id
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            switch ($statusCode) {
                case 202:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ConfirmDeliveryWindowOptionsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ConfirmDeliveryWindowOptionsResponse',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ConfirmDeliveryWindowOptionsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string)$response->getBody();
            }

            return [
                ObjectSerializer2024::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ConfirmDeliveryWindowOptionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation confirmDeliveryWindowOptionsAsync
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id The shipment to confirm the delivery window option for. (required)
     * @param string $delivery_window_option_id The id of the delivery window option to be confirmed. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function confirmDeliveryWindowOptionsAsync($inbound_plan_id, $shipment_id, $delivery_window_option_id)
    {
        return $this->confirmDeliveryWindowOptionsAsyncWithHttpInfo(
            $inbound_plan_id,
            $shipment_id,
            $delivery_window_option_id
        )
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation confirmDeliveryWindowOptionsAsyncWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id The shipment to confirm the delivery window option for. (required)
     * @param string $delivery_window_option_id The id of the delivery window option to be confirmed. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function confirmDeliveryWindowOptionsAsyncWithHttpInfo(
        $inbound_plan_id,
        $shipment_id,
        $delivery_window_option_id
    ) {
        $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ConfirmDeliveryWindowOptionsResponse';
        $request = $this->confirmDeliveryWindowOptionsRequest(
            $inbound_plan_id,
            $shipment_id,
            $delivery_window_option_id
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'confirmDeliveryWindowOptions'
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id The shipment to confirm the delivery window option for. (required)
     * @param string $delivery_window_option_id The id of the delivery window option to be confirmed. (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws InvalidArgumentException
     */
    public function confirmDeliveryWindowOptionsRequest($inbound_plan_id, $shipment_id, $delivery_window_option_id)
    {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling confirmDeliveryWindowOptions'
            );
        }
        if (strlen($inbound_plan_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.confirmDeliveryWindowOptions, must be smaller than or equal to 38.'
            );
        }
        if (strlen($inbound_plan_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.confirmDeliveryWindowOptions, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inbound_plan_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"inbound_plan_id\" when calling FbaInboundApi.confirmDeliveryWindowOptions, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling confirmDeliveryWindowOptions'
            );
        }
        if (strlen($shipment_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$shipment_id" when calling FbaInboundApi.confirmDeliveryWindowOptions, must be smaller than or equal to 38.'
            );
        }
        if (strlen($shipment_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$shipment_id" when calling FbaInboundApi.confirmDeliveryWindowOptions, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $shipment_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"shipment_id\" when calling FbaInboundApi.confirmDeliveryWindowOptions, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'delivery_window_option_id' is set
        if ($delivery_window_option_id === null || (is_array($delivery_window_option_id) && count(
                    $delivery_window_option_id
                ) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $delivery_window_option_id when calling confirmDeliveryWindowOptions'
            );
        }
        if (strlen($delivery_window_option_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$delivery_window_option_id" when calling FbaInboundApi.confirmDeliveryWindowOptions, must be smaller than or equal to 38.'
            );
        }
        if (strlen($delivery_window_option_id) < 36) {
            throw new InvalidArgumentException(
                'invalid length for "$delivery_window_option_id" when calling FbaInboundApi.confirmDeliveryWindowOptions, must be bigger than or equal to 36.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $delivery_window_option_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"delivery_window_option_id\" when calling FbaInboundApi.confirmDeliveryWindowOptions, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }


        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions/{deliveryWindowOptionId}/confirmation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer2024::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }
        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer2024::toPathValue($shipment_id),
                $resourcePath
            );
        }
        // path params
        if ($delivery_window_option_id !== null) {
            $resourcePath = str_replace(
                '{' . 'deliveryWindowOptionId' . '}',
                ObjectSerializer2024::toPathValue($delivery_window_option_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation confirmPackingOption
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $packing_option_id Identifier of a packing option. (required)
     *
     * @return ConfirmPackingOptionResponse| ErrorList
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function confirmPackingOption($inbound_plan_id, $packing_option_id)
    {
        list($response) = $this->confirmPackingOptionWithHttpInfo($inbound_plan_id, $packing_option_id);
        return $response;
    }

    /**
     * Operation confirmPackingOptionWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $packing_option_id Identifier of a packing option. (required)
     *
     * @return array of  ConfirmPackingOptionResponse| ErrorList, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function confirmPackingOptionWithHttpInfo($inbound_plan_id, $packing_option_id)
    {
        $request = $this->confirmPackingOptionRequest($inbound_plan_id, $packing_option_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            switch ($statusCode) {
                case 202:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ConfirmPackingOptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ConfirmPackingOptionResponse',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ConfirmPackingOptionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string)$response->getBody();
            }

            return [
                ObjectSerializer2024::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ConfirmPackingOptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation confirmPackingOptionAsync
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $packing_option_id Identifier of a packing option. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function confirmPackingOptionAsync($inbound_plan_id, $packing_option_id)
    {
        return $this->confirmPackingOptionAsyncWithHttpInfo($inbound_plan_id, $packing_option_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation confirmPackingOptionAsyncWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $packing_option_id Identifier of a packing option. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function confirmPackingOptionAsyncWithHttpInfo($inbound_plan_id, $packing_option_id)
    {
        $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ConfirmPackingOptionResponse';
        $request = $this->confirmPackingOptionRequest($inbound_plan_id, $packing_option_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'confirmPackingOption'
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $packing_option_id Identifier of a packing option. (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws InvalidArgumentException
     */
    public function confirmPackingOptionRequest($inbound_plan_id, $packing_option_id)
    {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling confirmPackingOption'
            );
        }
        if (strlen($inbound_plan_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.confirmPackingOption, must be smaller than or equal to 38.'
            );
        }
        if (strlen($inbound_plan_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.confirmPackingOption, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inbound_plan_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"inbound_plan_id\" when calling FbaInboundApi.confirmPackingOption, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'packing_option_id' is set
        if ($packing_option_id === null || (is_array($packing_option_id) && count($packing_option_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $packing_option_id when calling confirmPackingOption'
            );
        }
        if (strlen($packing_option_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$packing_option_id" when calling FbaInboundApi.confirmPackingOption, must be smaller than or equal to 38.'
            );
        }
        if (strlen($packing_option_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$packing_option_id" when calling FbaInboundApi.confirmPackingOption, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $packing_option_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"packing_option_id\" when calling FbaInboundApi.confirmPackingOption, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }


        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions/{packingOptionId}/confirmation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer2024::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }
        // path params
        if ($packing_option_id !== null) {
            $resourcePath = str_replace(
                '{' . 'packingOptionId' . '}',
                ObjectSerializer2024::toPathValue($packing_option_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation confirmPlacementOption
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $placement_option_id The identifier of a placement option. A placement option represents the shipment splits and destinations of SKUs. (required)
     *
     * @return ConfirmPlacementOptionResponse| ErrorList
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function confirmPlacementOption($inbound_plan_id, $placement_option_id)
    {
        list($response) = $this->confirmPlacementOptionWithHttpInfo($inbound_plan_id, $placement_option_id);
        return $response;
    }

    /**
     * Operation confirmPlacementOptionWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $placement_option_id The identifier of a placement option. A placement option represents the shipment splits and destinations of SKUs. (required)
     *
     * @return array of \Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ConfirmPlacementOptionResponse|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function confirmPlacementOptionWithHttpInfo($inbound_plan_id, $placement_option_id)
    {
        $request = $this->confirmPlacementOptionRequest($inbound_plan_id, $placement_option_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            switch ($statusCode) {
                case 202:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ConfirmPlacementOptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ConfirmPlacementOptionResponse',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ConfirmPlacementOptionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string)$response->getBody();
            }

            return [
                ObjectSerializer2024::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ConfirmPlacementOptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation confirmPlacementOptionAsync
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $placement_option_id The identifier of a placement option. A placement option represents the shipment splits and destinations of SKUs. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function confirmPlacementOptionAsync($inbound_plan_id, $placement_option_id)
    {
        return $this->confirmPlacementOptionAsyncWithHttpInfo($inbound_plan_id, $placement_option_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation confirmPlacementOptionAsyncWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $placement_option_id The identifier of a placement option. A placement option represents the shipment splits and destinations of SKUs. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function confirmPlacementOptionAsyncWithHttpInfo($inbound_plan_id, $placement_option_id)
    {
        $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ConfirmPlacementOptionResponse';
        $request = $this->confirmPlacementOptionRequest($inbound_plan_id, $placement_option_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'confirmPlacementOption'
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $placement_option_id The identifier of a placement option. A placement option represents the shipment splits and destinations of SKUs. (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws InvalidArgumentException
     */
    public function confirmPlacementOptionRequest($inbound_plan_id, $placement_option_id)
    {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling confirmPlacementOption'
            );
        }
        if (strlen($inbound_plan_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.confirmPlacementOption, must be smaller than or equal to 38.'
            );
        }
        if (strlen($inbound_plan_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.confirmPlacementOption, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inbound_plan_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"inbound_plan_id\" when calling FbaInboundApi.confirmPlacementOption, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'placement_option_id' is set
        if ($placement_option_id === null || (is_array($placement_option_id) && count($placement_option_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $placement_option_id when calling confirmPlacementOption'
            );
        }
        if (strlen($placement_option_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$placement_option_id" when calling FbaInboundApi.confirmPlacementOption, must be smaller than or equal to 38.'
            );
        }
        if (strlen($placement_option_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$placement_option_id" when calling FbaInboundApi.confirmPlacementOption, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $placement_option_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"placement_option_id\" when calling FbaInboundApi.confirmPlacementOption, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }


        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions/{placementOptionId}/confirmation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer2024::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }
        // path params
        if ($placement_option_id !== null) {
            $resourcePath = str_replace(
                '{' . 'placementOptionId' . '}',
                ObjectSerializer2024::toPathValue($placement_option_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation confirmShipmentContentUpdatePreview
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param string $content_update_preview_id Identifier of a content update preview. (required)
     *
     * @return ConfirmShipmentContentUpdatePreviewResponse| ErrorList
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function confirmShipmentContentUpdatePreview($inbound_plan_id, $shipment_id, $content_update_preview_id)
    {
        list($response) = $this->confirmShipmentContentUpdatePreviewWithHttpInfo(
            $inbound_plan_id,
            $shipment_id,
            $content_update_preview_id
        );
        return $response;
    }

    /**
     * Operation confirmShipmentContentUpdatePreviewWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param string $content_update_preview_id Identifier of a content update preview. (required)
     *
     * @return array of \Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ConfirmShipmentContentUpdatePreviewResponse|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function confirmShipmentContentUpdatePreviewWithHttpInfo(
        $inbound_plan_id,
        $shipment_id,
        $content_update_preview_id
    ) {
        $request = $this->confirmShipmentContentUpdatePreviewRequest(
            $inbound_plan_id,
            $shipment_id,
            $content_update_preview_id
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            switch ($statusCode) {
                case 202:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ConfirmShipmentContentUpdatePreviewResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ConfirmShipmentContentUpdatePreviewResponse',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ConfirmShipmentContentUpdatePreviewResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string)$response->getBody();
            }

            return [
                ObjectSerializer2024::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ConfirmShipmentContentUpdatePreviewResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation confirmShipmentContentUpdatePreviewAsync
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param string $content_update_preview_id Identifier of a content update preview. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function confirmShipmentContentUpdatePreviewAsync($inbound_plan_id, $shipment_id, $content_update_preview_id)
    {
        return $this->confirmShipmentContentUpdatePreviewAsyncWithHttpInfo(
            $inbound_plan_id,
            $shipment_id,
            $content_update_preview_id
        )
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation confirmShipmentContentUpdatePreviewAsyncWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param string $content_update_preview_id Identifier of a content update preview. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function confirmShipmentContentUpdatePreviewAsyncWithHttpInfo(
        $inbound_plan_id,
        $shipment_id,
        $content_update_preview_id
    ) {
        $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ConfirmShipmentContentUpdatePreviewResponse';
        $request = $this->confirmShipmentContentUpdatePreviewRequest(
            $inbound_plan_id,
            $shipment_id,
            $content_update_preview_id
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'confirmShipmentContentUpdatePreview'
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param string $content_update_preview_id Identifier of a content update preview. (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws InvalidArgumentException
     */
    public function confirmShipmentContentUpdatePreviewRequest(
        $inbound_plan_id,
        $shipment_id,
        $content_update_preview_id
    ) {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling confirmShipmentContentUpdatePreview'
            );
        }
        if (strlen($inbound_plan_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.confirmShipmentContentUpdatePreview, must be smaller than or equal to 38.'
            );
        }
        if (strlen($inbound_plan_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.confirmShipmentContentUpdatePreview, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inbound_plan_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"inbound_plan_id\" when calling FbaInboundApi.confirmShipmentContentUpdatePreview, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling confirmShipmentContentUpdatePreview'
            );
        }
        if (strlen($shipment_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$shipment_id" when calling FbaInboundApi.confirmShipmentContentUpdatePreview, must be smaller than or equal to 38.'
            );
        }
        if (strlen($shipment_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$shipment_id" when calling FbaInboundApi.confirmShipmentContentUpdatePreview, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $shipment_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"shipment_id\" when calling FbaInboundApi.confirmShipmentContentUpdatePreview, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'content_update_preview_id' is set
        if ($content_update_preview_id === null || (is_array($content_update_preview_id) && count(
                    $content_update_preview_id
                ) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $content_update_preview_id when calling confirmShipmentContentUpdatePreview'
            );
        }
        if (strlen($content_update_preview_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$content_update_preview_id" when calling FbaInboundApi.confirmShipmentContentUpdatePreview, must be smaller than or equal to 38.'
            );
        }
        if (strlen($content_update_preview_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$content_update_preview_id" when calling FbaInboundApi.confirmShipmentContentUpdatePreview, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $content_update_preview_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"content_update_preview_id\" when calling FbaInboundApi.confirmShipmentContentUpdatePreview, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }


        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews/{contentUpdatePreviewId}/confirmation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer2024::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }
        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer2024::toPathValue($shipment_id),
                $resourcePath
            );
        }
        // path params
        if ($content_update_preview_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contentUpdatePreviewId' . '}',
                ObjectSerializer2024::toPathValue($content_update_preview_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation confirmTransportationOptions
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param ConfirmTransportationOptionsRequest $body The body of the request to &#x60;confirmTransportationOptions&#x60;. (required)
     *
     * @return ConfirmTransportationOptionsResponse| ErrorList
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function confirmTransportationOptions($inbound_plan_id, $body)
    {
        list($response) = $this->confirmTransportationOptionsWithHttpInfo($inbound_plan_id, $body);
        return $response;
    }

    /**
     * Operation confirmTransportationOptionsWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param ConfirmTransportationOptionsRequest $body The body of the request to &#x60;confirmTransportationOptions&#x60;. (required)
     *
     * @return array of \Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ConfirmTransportationOptionsResponse|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function confirmTransportationOptionsWithHttpInfo($inbound_plan_id, $body)
    {
        $request = $this->confirmTransportationOptionsRequest($inbound_plan_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            switch ($statusCode) {
                case 202:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ConfirmTransportationOptionsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ConfirmTransportationOptionsResponse',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ConfirmTransportationOptionsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string)$response->getBody();
            }

            return [
                ObjectSerializer2024::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ConfirmTransportationOptionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation confirmTransportationOptionsAsync
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param ConfirmTransportationOptionsRequest $body The body of the request to &#x60;confirmTransportationOptions&#x60;. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function confirmTransportationOptionsAsync($inbound_plan_id, $body)
    {
        return $this->confirmTransportationOptionsAsyncWithHttpInfo($inbound_plan_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation confirmTransportationOptionsAsyncWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param ConfirmTransportationOptionsRequest $body The body of the request to &#x60;confirmTransportationOptions&#x60;. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function confirmTransportationOptionsAsyncWithHttpInfo($inbound_plan_id, $body)
    {
        $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ConfirmTransportationOptionsResponse';
        $request = $this->confirmTransportationOptionsRequest($inbound_plan_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'confirmTransportationOptions'
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param ConfirmTransportationOptionsRequest $body The body of the request to &#x60;confirmTransportationOptions&#x60;. (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws InvalidArgumentException
     */
    public function confirmTransportationOptionsRequest($inbound_plan_id, $body)
    {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling confirmTransportationOptions'
            );
        }
        if (strlen($inbound_plan_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.confirmTransportationOptions, must be smaller than or equal to 38.'
            );
        }
        if (strlen($inbound_plan_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.confirmTransportationOptions, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inbound_plan_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"inbound_plan_id\" when calling FbaInboundApi.confirmTransportationOptions, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling confirmTransportationOptions'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/transportationOptions/confirmation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer2024::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer2024::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createInboundPlan
     *
     * @param CreateInboundPlanRequest $body The body of the request to &#x60;createInboundPlan&#x60;. (required)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return CreateInboundPlanResponse| ErrorList
     */
    public function createInboundPlan($body)
    {
        list($response) = $this->createInboundPlanWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createInboundPlanWithHttpInfo
     *
     * @param CreateInboundPlanRequest $body The body of the request to &#x60;createInboundPlan&#x60;. (required)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of CreateInboundPlanResponse|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList, HTTP status code, HTTP response headers (array of strings)
     */
    public function createInboundPlanWithHttpInfo($body)
    {
        $request = $this->createInboundPlanRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            switch ($statusCode) {
                case 202:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\CreateInboundPlanResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\CreateInboundPlanResponse',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\CreateInboundPlanResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string)$response->getBody();
            }

            return [
                ObjectSerializer2024::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\CreateInboundPlanResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createInboundPlanAsync
     *
     * @param CreateInboundPlanRequest $body The body of the request to &#x60;createInboundPlan&#x60;. (required)
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createInboundPlanAsync($body)
    {
        return $this->createInboundPlanAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createInboundPlanAsyncWithHttpInfo
     *
     * @param CreateInboundPlanRequest $body The body of the request to &#x60;createInboundPlan&#x60;. (required)
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createInboundPlanAsyncWithHttpInfo($body)
    {
        $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\CreateInboundPlanResponse';
        $request = $this->createInboundPlanRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createInboundPlan'
     *
     * @param CreateInboundPlanRequest $body The body of the request to &#x60;createInboundPlan&#x60;. (required)
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createInboundPlanRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling createInboundPlan'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer2024::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createMarketplaceItemLabels
     *
     * @param CreateMarketplaceItemLabelsRequest $body The body of the request to &#x60;createMarketplaceItemLabels&#x60;. (required)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return CreateMarketplaceItemLabelsResponse| ErrorList
     */
    public function createMarketplaceItemLabels($body)
    {
        list($response) = $this->createMarketplaceItemLabelsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createMarketplaceItemLabelsWithHttpInfo
     *
     * @param CreateMarketplaceItemLabelsRequest $body The body of the request to &#x60;createMarketplaceItemLabels&#x60;. (required)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\CreateMarketplaceItemLabelsResponse|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList, HTTP status code, HTTP response headers (array of strings)
     */
    public function createMarketplaceItemLabelsWithHttpInfo($body)
    {
        $request = $this->createMarketplaceItemLabelsRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\CreateMarketplaceItemLabelsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\CreateMarketplaceItemLabelsResponse',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\CreateMarketplaceItemLabelsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string)$response->getBody();
            }

            return [
                ObjectSerializer2024::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\CreateMarketplaceItemLabelsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createMarketplaceItemLabelsAsync
     *
     * @param CreateMarketplaceItemLabelsRequest $body The body of the request to &#x60;createMarketplaceItemLabels&#x60;. (required)
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createMarketplaceItemLabelsAsync($body)
    {
        return $this->createMarketplaceItemLabelsAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createMarketplaceItemLabelsAsyncWithHttpInfo
     *
     * @param CreateMarketplaceItemLabelsRequest $body The body of the request to &#x60;createMarketplaceItemLabels&#x60;. (required)
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createMarketplaceItemLabelsAsyncWithHttpInfo($body)
    {
        $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\CreateMarketplaceItemLabelsResponse';
        $request = $this->createMarketplaceItemLabelsRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createMarketplaceItemLabels'
     *
     * @param CreateMarketplaceItemLabelsRequest $body The body of the request to &#x60;createMarketplaceItemLabels&#x60;. (required)
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createMarketplaceItemLabelsRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling createMarketplaceItemLabels'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/items/labels';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer2024::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation generateDeliveryWindowOptions
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id The shipment to generate delivery window options for. (required)
     *
     * @return GenerateDeliveryWindowOptionsResponse| ErrorList
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function generateDeliveryWindowOptions($inbound_plan_id, $shipment_id)
    {
        list($response) = $this->generateDeliveryWindowOptionsWithHttpInfo($inbound_plan_id, $shipment_id);
        return $response;
    }

    /**
     * Operation generateDeliveryWindowOptionsWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id The shipment to generate delivery window options for. (required)
     *
     * @return array of \Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\GenerateDeliveryWindowOptionsResponse|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function generateDeliveryWindowOptionsWithHttpInfo($inbound_plan_id, $shipment_id)
    {
        $request = $this->generateDeliveryWindowOptionsRequest($inbound_plan_id, $shipment_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            switch ($statusCode) {
                case 202:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\GenerateDeliveryWindowOptionsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\GenerateDeliveryWindowOptionsResponse',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\GenerateDeliveryWindowOptionsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string)$response->getBody();
            }

            return [
                ObjectSerializer2024::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\GenerateDeliveryWindowOptionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation generateDeliveryWindowOptionsAsync
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id The shipment to generate delivery window options for. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function generateDeliveryWindowOptionsAsync($inbound_plan_id, $shipment_id)
    {
        return $this->generateDeliveryWindowOptionsAsyncWithHttpInfo($inbound_plan_id, $shipment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation generateDeliveryWindowOptionsAsyncWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id The shipment to generate delivery window options for. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function generateDeliveryWindowOptionsAsyncWithHttpInfo($inbound_plan_id, $shipment_id)
    {
        $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\GenerateDeliveryWindowOptionsResponse';
        $request = $this->generateDeliveryWindowOptionsRequest($inbound_plan_id, $shipment_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'generateDeliveryWindowOptions'
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id The shipment to generate delivery window options for. (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws InvalidArgumentException
     */
    public function generateDeliveryWindowOptionsRequest($inbound_plan_id, $shipment_id)
    {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling generateDeliveryWindowOptions'
            );
        }
        if (strlen($inbound_plan_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.generateDeliveryWindowOptions, must be smaller than or equal to 38.'
            );
        }
        if (strlen($inbound_plan_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.generateDeliveryWindowOptions, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inbound_plan_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"inbound_plan_id\" when calling FbaInboundApi.generateDeliveryWindowOptions, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling generateDeliveryWindowOptions'
            );
        }
        if (strlen($shipment_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$shipment_id" when calling FbaInboundApi.generateDeliveryWindowOptions, must be smaller than or equal to 38.'
            );
        }
        if (strlen($shipment_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$shipment_id" when calling FbaInboundApi.generateDeliveryWindowOptions, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $shipment_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"shipment_id\" when calling FbaInboundApi.generateDeliveryWindowOptions, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }


        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer2024::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }
        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer2024::toPathValue($shipment_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation generatePackingOptions
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     *
     * @return GeneratePackingOptionsResponse| ErrorList
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function generatePackingOptions($inbound_plan_id)
    {
        list($response) = $this->generatePackingOptionsWithHttpInfo($inbound_plan_id);
        return $response;
    }

    /**
     * Operation generatePackingOptionsWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     *
     * @return array of \Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\GeneratePackingOptionsResponse|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function generatePackingOptionsWithHttpInfo($inbound_plan_id)
    {
        $request = $this->generatePackingOptionsRequest($inbound_plan_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            switch ($statusCode) {
                case 202:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\GeneratePackingOptionsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\GeneratePackingOptionsResponse',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\GeneratePackingOptionsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string)$response->getBody();
            }

            return [
                ObjectSerializer2024::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\GeneratePackingOptionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation generatePackingOptionsAsync
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function generatePackingOptionsAsync($inbound_plan_id)
    {
        return $this->generatePackingOptionsAsyncWithHttpInfo($inbound_plan_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation generatePackingOptionsAsyncWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function generatePackingOptionsAsyncWithHttpInfo($inbound_plan_id)
    {
        $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\GeneratePackingOptionsResponse';
        $request = $this->generatePackingOptionsRequest($inbound_plan_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'generatePackingOptions'
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws InvalidArgumentException
     */
    public function generatePackingOptionsRequest($inbound_plan_id)
    {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling generatePackingOptions'
            );
        }
        if (strlen($inbound_plan_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.generatePackingOptions, must be smaller than or equal to 38.'
            );
        }
        if (strlen($inbound_plan_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.generatePackingOptions, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inbound_plan_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"inbound_plan_id\" when calling FbaInboundApi.generatePackingOptions, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }


        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer2024::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation generatePlacementOptions
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param GeneratePlacementOptionsRequest $body The body of the request to &#x60;generatePlacementOptions&#x60;. (required)
     *
     * @return GeneratePlacementOptionsResponse| ErrorList
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function generatePlacementOptions($inbound_plan_id, $body)
    {
        list($response) = $this->generatePlacementOptionsWithHttpInfo($inbound_plan_id, $body);
        return $response;
    }

    /**
     * Operation generatePlacementOptionsWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param GeneratePlacementOptionsRequest $body The body of the request to &#x60;generatePlacementOptions&#x60;. (required)
     *
     * @return array of GeneratePlacementOptionsResponse|ErrorList, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function generatePlacementOptionsWithHttpInfo($inbound_plan_id, $body)
    {
        $request = $this->generatePlacementOptionsRequest($inbound_plan_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            switch ($statusCode) {
                case 202:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\GeneratePlacementOptionsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\GeneratePlacementOptionsResponse',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\GeneratePlacementOptionsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string)$response->getBody();
            }

            return [
                ObjectSerializer2024::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\GeneratePlacementOptionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation generatePlacementOptionsAsync
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param GeneratePlacementOptionsRequest $body The body of the request to &#x60;generatePlacementOptions&#x60;. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function generatePlacementOptionsAsync($inbound_plan_id, $body)
    {
        return $this->generatePlacementOptionsAsyncWithHttpInfo($inbound_plan_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation generatePlacementOptionsAsyncWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param GeneratePlacementOptionsRequest $body The body of the request to &#x60;generatePlacementOptions&#x60;. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function generatePlacementOptionsAsyncWithHttpInfo($inbound_plan_id, $body)
    {
        $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\GeneratePlacementOptionsResponse';
        $request = $this->generatePlacementOptionsRequest($inbound_plan_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'generatePlacementOptions'
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param GeneratePlacementOptionsRequest $body The body of the request to &#x60;generatePlacementOptions&#x60;. (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws InvalidArgumentException
     */
    public function generatePlacementOptionsRequest($inbound_plan_id, $body)
    {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling generatePlacementOptions'
            );
        }
        if (strlen($inbound_plan_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.generatePlacementOptions, must be smaller than or equal to 38.'
            );
        }
        if (strlen($inbound_plan_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.generatePlacementOptions, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inbound_plan_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"inbound_plan_id\" when calling FbaInboundApi.generatePlacementOptions, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling generatePlacementOptions'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer2024::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer2024::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation generateSelfShipAppointmentSlots
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param GenerateSelfShipAppointmentSlotsRequest $body The body of the request to &#x60;generateSelfShipAppointmentSlots&#x60;. (required)
     *
     * @return GenerateSelfShipAppointmentSlotsResponse| ErrorList
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function generateSelfShipAppointmentSlots($inbound_plan_id, $shipment_id, $body)
    {
        list($response) = $this->generateSelfShipAppointmentSlotsWithHttpInfo($inbound_plan_id, $shipment_id, $body);
        return $response;
    }

    /**
     * Operation generateSelfShipAppointmentSlotsWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param GenerateSelfShipAppointmentSlotsRequest $body The body of the request to &#x60;generateSelfShipAppointmentSlots&#x60;. (required)
     *
     * @return array of \Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\GenerateSelfShipAppointmentSlotsResponse|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function generateSelfShipAppointmentSlotsWithHttpInfo($inbound_plan_id, $shipment_id, $body)
    {
        $request = $this->generateSelfShipAppointmentSlotsRequest($inbound_plan_id, $shipment_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            switch ($statusCode) {
                case 201:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\GenerateSelfShipAppointmentSlotsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\GenerateSelfShipAppointmentSlotsResponse',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\GenerateSelfShipAppointmentSlotsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string)$response->getBody();
            }

            return [
                ObjectSerializer2024::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\GenerateSelfShipAppointmentSlotsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation generateSelfShipAppointmentSlotsAsync
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param GenerateSelfShipAppointmentSlotsRequest $body The body of the request to &#x60;generateSelfShipAppointmentSlots&#x60;. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function generateSelfShipAppointmentSlotsAsync($inbound_plan_id, $shipment_id, $body)
    {
        return $this->generateSelfShipAppointmentSlotsAsyncWithHttpInfo($inbound_plan_id, $shipment_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation generateSelfShipAppointmentSlotsAsyncWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param GenerateSelfShipAppointmentSlotsRequest $body The body of the request to &#x60;generateSelfShipAppointmentSlots&#x60;. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function generateSelfShipAppointmentSlotsAsyncWithHttpInfo($inbound_plan_id, $shipment_id, $body)
    {
        $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\GenerateSelfShipAppointmentSlotsResponse';
        $request = $this->generateSelfShipAppointmentSlotsRequest($inbound_plan_id, $shipment_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'generateSelfShipAppointmentSlots'
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param GenerateSelfShipAppointmentSlotsRequest $body The body of the request to &#x60;generateSelfShipAppointmentSlots&#x60;. (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws InvalidArgumentException
     */
    public function generateSelfShipAppointmentSlotsRequest($inbound_plan_id, $shipment_id, $body)
    {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling generateSelfShipAppointmentSlots'
            );
        }
        if (strlen($inbound_plan_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.generateSelfShipAppointmentSlots, must be smaller than or equal to 38.'
            );
        }
        if (strlen($inbound_plan_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.generateSelfShipAppointmentSlots, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inbound_plan_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"inbound_plan_id\" when calling FbaInboundApi.generateSelfShipAppointmentSlots, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling generateSelfShipAppointmentSlots'
            );
        }
        if (strlen($shipment_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$shipment_id" when calling FbaInboundApi.generateSelfShipAppointmentSlots, must be smaller than or equal to 38.'
            );
        }
        if (strlen($shipment_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$shipment_id" when calling FbaInboundApi.generateSelfShipAppointmentSlots, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $shipment_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"shipment_id\" when calling FbaInboundApi.generateSelfShipAppointmentSlots, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling generateSelfShipAppointmentSlots'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/selfShipAppointmentSlots';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer2024::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }
        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer2024::toPathValue($shipment_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer2024::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation generateShipmentContentUpdatePreviews
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param GenerateShipmentContentUpdatePreviewsRequest $body The body of the request to &#x60;generateShipmentContentUpdatePreviews&#x60;. (required)
     *
     * @return GenerateShipmentContentUpdatePreviewsResponse| ErrorList
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function generateShipmentContentUpdatePreviews($inbound_plan_id, $shipment_id, $body)
    {
        list($response) = $this->generateShipmentContentUpdatePreviewsWithHttpInfo(
            $inbound_plan_id,
            $shipment_id,
            $body
        );
        return $response;
    }

    /**
     * Operation generateShipmentContentUpdatePreviewsWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param GenerateShipmentContentUpdatePreviewsRequest $body The body of the request to &#x60;generateShipmentContentUpdatePreviews&#x60;. (required)
     *
     * @return array of \Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\GenerateShipmentContentUpdatePreviewsResponse|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function generateShipmentContentUpdatePreviewsWithHttpInfo($inbound_plan_id, $shipment_id, $body)
    {
        $request = $this->generateShipmentContentUpdatePreviewsRequest($inbound_plan_id, $shipment_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            switch ($statusCode) {
                case 202:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\GenerateShipmentContentUpdatePreviewsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\GenerateShipmentContentUpdatePreviewsResponse',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\GenerateShipmentContentUpdatePreviewsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string)$response->getBody();
            }

            return [
                ObjectSerializer2024::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\GenerateShipmentContentUpdatePreviewsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation generateShipmentContentUpdatePreviewsAsync
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param GenerateShipmentContentUpdatePreviewsRequest $body The body of the request to &#x60;generateShipmentContentUpdatePreviews&#x60;. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function generateShipmentContentUpdatePreviewsAsync($inbound_plan_id, $shipment_id, $body)
    {
        return $this->generateShipmentContentUpdatePreviewsAsyncWithHttpInfo($inbound_plan_id, $shipment_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation generateShipmentContentUpdatePreviewsAsyncWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param GenerateShipmentContentUpdatePreviewsRequest $body The body of the request to &#x60;generateShipmentContentUpdatePreviews&#x60;. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function generateShipmentContentUpdatePreviewsAsyncWithHttpInfo($inbound_plan_id, $shipment_id, $body)
    {
        $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\GenerateShipmentContentUpdatePreviewsResponse';
        $request = $this->generateShipmentContentUpdatePreviewsRequest($inbound_plan_id, $shipment_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'generateShipmentContentUpdatePreviews'
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param GenerateShipmentContentUpdatePreviewsRequest $body The body of the request to &#x60;generateShipmentContentUpdatePreviews&#x60;. (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws InvalidArgumentException
     */
    public function generateShipmentContentUpdatePreviewsRequest($inbound_plan_id, $shipment_id, $body)
    {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling generateShipmentContentUpdatePreviews'
            );
        }
        if (strlen($inbound_plan_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.generateShipmentContentUpdatePreviews, must be smaller than or equal to 38.'
            );
        }
        if (strlen($inbound_plan_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.generateShipmentContentUpdatePreviews, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inbound_plan_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"inbound_plan_id\" when calling FbaInboundApi.generateShipmentContentUpdatePreviews, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling generateShipmentContentUpdatePreviews'
            );
        }
        if (strlen($shipment_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$shipment_id" when calling FbaInboundApi.generateShipmentContentUpdatePreviews, must be smaller than or equal to 38.'
            );
        }
        if (strlen($shipment_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$shipment_id" when calling FbaInboundApi.generateShipmentContentUpdatePreviews, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $shipment_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"shipment_id\" when calling FbaInboundApi.generateShipmentContentUpdatePreviews, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling generateShipmentContentUpdatePreviews'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer2024::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }
        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer2024::toPathValue($shipment_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer2024::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation generateTransportationOptions
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param GenerateTransportationOptionsRequest $body The body of the request to &#x60;generateTransportationOptions&#x60;. (required)
     *
     * @return GenerateTransportationOptionsResponse| ErrorList
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function generateTransportationOptions($inbound_plan_id, $body)
    {
        list($response) = $this->generateTransportationOptionsWithHttpInfo($inbound_plan_id, $body);
        return $response;
    }

    /**
     * Operation generateTransportationOptionsWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param GenerateTransportationOptionsRequest $body The body of the request to &#x60;generateTransportationOptions&#x60;. (required)
     *
     * @return array of \Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\GenerateTransportationOptionsResponse|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function generateTransportationOptionsWithHttpInfo($inbound_plan_id, $body)
    {
        $request = $this->generateTransportationOptionsRequest($inbound_plan_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            switch ($statusCode) {
                case 202:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\GenerateTransportationOptionsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\GenerateTransportationOptionsResponse',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\GenerateTransportationOptionsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string)$response->getBody();
            }

            return [
                ObjectSerializer2024::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\GenerateTransportationOptionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation generateTransportationOptionsAsync
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param GenerateTransportationOptionsRequest $body The body of the request to &#x60;generateTransportationOptions&#x60;. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function generateTransportationOptionsAsync($inbound_plan_id, $body)
    {
        return $this->generateTransportationOptionsAsyncWithHttpInfo($inbound_plan_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation generateTransportationOptionsAsyncWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param GenerateTransportationOptionsRequest $body The body of the request to &#x60;generateTransportationOptions&#x60;. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function generateTransportationOptionsAsyncWithHttpInfo($inbound_plan_id, $body)
    {
        $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\GenerateTransportationOptionsResponse';
        $request = $this->generateTransportationOptionsRequest($inbound_plan_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'generateTransportationOptions'
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param GenerateTransportationOptionsRequest $body The body of the request to &#x60;generateTransportationOptions&#x60;. (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws InvalidArgumentException
     */
    public function generateTransportationOptionsRequest($inbound_plan_id, $body)
    {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling generateTransportationOptions'
            );
        }
        if (strlen($inbound_plan_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.generateTransportationOptions, must be smaller than or equal to 38.'
            );
        }
        if (strlen($inbound_plan_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.generateTransportationOptions, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inbound_plan_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"inbound_plan_id\" when calling FbaInboundApi.generateTransportationOptions, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling generateTransportationOptions'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/transportationOptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer2024::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer2024::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDeliveryChallanDocument
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     *
     * @return GetDeliveryChallanDocumentResponse| ErrorList
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function getDeliveryChallanDocument($inbound_plan_id, $shipment_id)
    {
        list($response) = $this->getDeliveryChallanDocumentWithHttpInfo($inbound_plan_id, $shipment_id);
        return $response;
    }

    /**
     * Operation getDeliveryChallanDocumentWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     *
     * @return array of \Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\GetDeliveryChallanDocumentResponse|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function getDeliveryChallanDocumentWithHttpInfo($inbound_plan_id, $shipment_id)
    {
        $request = $this->getDeliveryChallanDocumentRequest($inbound_plan_id, $shipment_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\GetDeliveryChallanDocumentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\GetDeliveryChallanDocumentResponse',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\GetDeliveryChallanDocumentResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string)$response->getBody();
            }

            return [
                ObjectSerializer2024::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\GetDeliveryChallanDocumentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDeliveryChallanDocumentAsync
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function getDeliveryChallanDocumentAsync($inbound_plan_id, $shipment_id)
    {
        return $this->getDeliveryChallanDocumentAsyncWithHttpInfo($inbound_plan_id, $shipment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDeliveryChallanDocumentAsyncWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function getDeliveryChallanDocumentAsyncWithHttpInfo($inbound_plan_id, $shipment_id)
    {
        $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\GetDeliveryChallanDocumentResponse';
        $request = $this->getDeliveryChallanDocumentRequest($inbound_plan_id, $shipment_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDeliveryChallanDocument'
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws InvalidArgumentException
     */
    public function getDeliveryChallanDocumentRequest($inbound_plan_id, $shipment_id)
    {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling getDeliveryChallanDocument'
            );
        }
        if (strlen($inbound_plan_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.getDeliveryChallanDocument, must be smaller than or equal to 38.'
            );
        }
        if (strlen($inbound_plan_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.getDeliveryChallanDocument, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inbound_plan_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"inbound_plan_id\" when calling FbaInboundApi.getDeliveryChallanDocument, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling getDeliveryChallanDocument'
            );
        }
        if (strlen($shipment_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$shipment_id" when calling FbaInboundApi.getDeliveryChallanDocument, must be smaller than or equal to 38.'
            );
        }
        if (strlen($shipment_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$shipment_id" when calling FbaInboundApi.getDeliveryChallanDocument, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $shipment_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"shipment_id\" when calling FbaInboundApi.getDeliveryChallanDocument, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }


        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryChallanDocument';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer2024::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }
        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer2024::toPathValue($shipment_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInboundOperationStatus
     *
     * @param string $operation_id Identifier of an asynchronous operation. (required)
     *
     * @return InboundOperationStatus| ErrorList
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function getInboundOperationStatus($operation_id)
    {
        list($response) = $this->getInboundOperationStatusWithHttpInfo($operation_id);
        return $response;
    }

    /**
     * Operation getInboundOperationStatusWithHttpInfo
     *
     * @param string $operation_id Identifier of an asynchronous operation. (required)
     *
     * @return array of \Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\InboundOperationStatus|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function getInboundOperationStatusWithHttpInfo($operation_id)
    {
        $request = $this->getInboundOperationStatusRequest($operation_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\InboundOperationStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\InboundOperationStatus',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\InboundOperationStatus';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string)$response->getBody();
            }

            return [
                ObjectSerializer2024::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\InboundOperationStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInboundOperationStatusAsync
     *
     * @param string $operation_id Identifier of an asynchronous operation. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function getInboundOperationStatusAsync($operation_id)
    {
        return $this->getInboundOperationStatusAsyncWithHttpInfo($operation_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInboundOperationStatusAsyncWithHttpInfo
     *
     * @param string $operation_id Identifier of an asynchronous operation. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function getInboundOperationStatusAsyncWithHttpInfo($operation_id)
    {
        $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\InboundOperationStatus';
        $request = $this->getInboundOperationStatusRequest($operation_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInboundOperationStatus'
     *
     * @param string $operation_id Identifier of an asynchronous operation. (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws InvalidArgumentException
     */
    public function getInboundOperationStatusRequest($operation_id)
    {
        // verify the required parameter 'operation_id' is set
        if ($operation_id === null || (is_array($operation_id) && count($operation_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $operation_id when calling getInboundOperationStatus'
            );
        }
        if (strlen($operation_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$operation_id" when calling FbaInboundApi.getInboundOperationStatus, must be smaller than or equal to 38.'
            );
        }
        if (strlen($operation_id) < 36) {
            throw new InvalidArgumentException(
                'invalid length for "$operation_id" when calling FbaInboundApi.getInboundOperationStatus, must be bigger than or equal to 36.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $operation_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"operation_id\" when calling FbaInboundApi.getInboundOperationStatus, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }


        $resourcePath = '/inbound/fba/2024-03-20/operations/{operationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($operation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'operationId' . '}',
                ObjectSerializer2024::toPathValue($operation_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInboundPlan
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     *
     * @return InboundPlan| ErrorList
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function getInboundPlan($inbound_plan_id)
    {
        list($response) = $this->getInboundPlanWithHttpInfo($inbound_plan_id);
        return $response;
    }

    /**
     * Operation getInboundPlanWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     *
     * @return array of \Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\InboundPlan|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function getInboundPlanWithHttpInfo($inbound_plan_id)
    {
        $request = $this->getInboundPlanRequest($inbound_plan_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\InboundPlan' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\InboundPlan',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\InboundPlan';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string)$response->getBody();
            }

            return [
                ObjectSerializer2024::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\InboundPlan',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInboundPlanAsync
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function getInboundPlanAsync($inbound_plan_id)
    {
        return $this->getInboundPlanAsyncWithHttpInfo($inbound_plan_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInboundPlanAsyncWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function getInboundPlanAsyncWithHttpInfo($inbound_plan_id)
    {
        $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\InboundPlan';
        $request = $this->getInboundPlanRequest($inbound_plan_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInboundPlan'
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws InvalidArgumentException
     */
    public function getInboundPlanRequest($inbound_plan_id)
    {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling getInboundPlan'
            );
        }
        if (strlen($inbound_plan_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.getInboundPlan, must be smaller than or equal to 38.'
            );
        }
        if (strlen($inbound_plan_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.getInboundPlan, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inbound_plan_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"inbound_plan_id\" when calling FbaInboundApi.getInboundPlan, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }


        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer2024::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSelfShipAppointmentSlots
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param int $page_size The number of self ship appointment slots to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return GetSelfShipAppointmentSlotsResponse| ErrorList
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function getSelfShipAppointmentSlots(
        $inbound_plan_id,
        $shipment_id,
        $page_size = 10,
        $pagination_token = null
    ) {
        list($response) = $this->getSelfShipAppointmentSlotsWithHttpInfo(
            $inbound_plan_id,
            $shipment_id,
            $page_size,
            $pagination_token
        );
        return $response;
    }

    /**
     * Operation getSelfShipAppointmentSlotsWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param int $page_size The number of self ship appointment slots to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return array of \Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\GetSelfShipAppointmentSlotsResponse|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function getSelfShipAppointmentSlotsWithHttpInfo(
        $inbound_plan_id,
        $shipment_id,
        $page_size = 10,
        $pagination_token = null
    ) {
        $request = $this->getSelfShipAppointmentSlotsRequest(
            $inbound_plan_id,
            $shipment_id,
            $page_size,
            $pagination_token
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\GetSelfShipAppointmentSlotsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\GetSelfShipAppointmentSlotsResponse',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\GetSelfShipAppointmentSlotsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string)$response->getBody();
            }

            return [
                ObjectSerializer2024::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\GetSelfShipAppointmentSlotsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSelfShipAppointmentSlotsAsync
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param int $page_size The number of self ship appointment slots to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function getSelfShipAppointmentSlotsAsync(
        $inbound_plan_id,
        $shipment_id,
        $page_size = 10,
        $pagination_token = null
    ) {
        return $this->getSelfShipAppointmentSlotsAsyncWithHttpInfo(
            $inbound_plan_id,
            $shipment_id,
            $page_size,
            $pagination_token
        )
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSelfShipAppointmentSlotsAsyncWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param int $page_size The number of self ship appointment slots to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function getSelfShipAppointmentSlotsAsyncWithHttpInfo(
        $inbound_plan_id,
        $shipment_id,
        $page_size = 10,
        $pagination_token = null
    ) {
        $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\GetSelfShipAppointmentSlotsResponse';
        $request = $this->getSelfShipAppointmentSlotsRequest(
            $inbound_plan_id,
            $shipment_id,
            $page_size,
            $pagination_token
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSelfShipAppointmentSlots'
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param int $page_size The number of self ship appointment slots to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws InvalidArgumentException
     */
    public function getSelfShipAppointmentSlotsRequest(
        $inbound_plan_id,
        $shipment_id,
        $page_size = 10,
        $pagination_token = null
    ) {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling getSelfShipAppointmentSlots'
            );
        }
        if (strlen($inbound_plan_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.getSelfShipAppointmentSlots, must be smaller than or equal to 38.'
            );
        }
        if (strlen($inbound_plan_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.getSelfShipAppointmentSlots, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inbound_plan_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"inbound_plan_id\" when calling FbaInboundApi.getSelfShipAppointmentSlots, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling getSelfShipAppointmentSlots'
            );
        }
        if (strlen($shipment_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$shipment_id" when calling FbaInboundApi.getSelfShipAppointmentSlots, must be smaller than or equal to 38.'
            );
        }
        if (strlen($shipment_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$shipment_id" when calling FbaInboundApi.getSelfShipAppointmentSlots, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $shipment_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"shipment_id\" when calling FbaInboundApi.getSelfShipAppointmentSlots, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        if ($page_size !== null && $page_size > 100) {
            throw new InvalidArgumentException(
                'invalid value for "$page_size" when calling FbaInboundApi.getSelfShipAppointmentSlots, must be smaller than or equal to 100.'
            );
        }
        if ($page_size !== null && $page_size < 1) {
            throw new InvalidArgumentException(
                'invalid value for "$page_size" when calling FbaInboundApi.getSelfShipAppointmentSlots, must be bigger than or equal to 1.'
            );
        }

        if ($pagination_token !== null && strlen($pagination_token) > 1024) {
            throw new InvalidArgumentException(
                'invalid length for "$pagination_token" when calling FbaInboundApi.getSelfShipAppointmentSlots, must be smaller than or equal to 1024.'
            );
        }
        if ($pagination_token !== null && strlen($pagination_token) < 0) {
            throw new InvalidArgumentException(
                'invalid length for "$pagination_token" when calling FbaInboundApi.getSelfShipAppointmentSlots, must be bigger than or equal to 0.'
            );
        }


        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/selfShipAppointmentSlots';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($page_size)) {
            $page_size = ObjectSerializer2024::serializeCollection($page_size, '', true);
        }
        if ($page_size !== null) {
            $queryParams['pageSize'] = $page_size;
        }
        // query params
        if (is_array($pagination_token)) {
            $pagination_token = ObjectSerializer2024::serializeCollection($pagination_token, '', true);
        }
        if ($pagination_token !== null) {
            $queryParams['paginationToken'] = $pagination_token;
        }


        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer2024::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }
        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer2024::toPathValue($shipment_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getShipment
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     *
     * @return Shipment| ErrorList
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function getShipment($inbound_plan_id, $shipment_id)
    {
        list($response) = $this->getShipmentWithHttpInfo($inbound_plan_id, $shipment_id);
        return $response;
    }

    /**
     * Operation getShipmentWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     *
     * @return array of Shipment|ErrorList|, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function getShipmentWithHttpInfo($inbound_plan_id, $shipment_id)
    {
        $request = $this->getShipmentRequest($inbound_plan_id, $shipment_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\Shipment' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\Shipment',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\Shipment';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string)$response->getBody();
            }

            return [
                ObjectSerializer2024::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\Shipment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getShipmentAsync
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function getShipmentAsync($inbound_plan_id, $shipment_id)
    {
        return $this->getShipmentAsyncWithHttpInfo($inbound_plan_id, $shipment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getShipmentAsyncWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function getShipmentAsyncWithHttpInfo($inbound_plan_id, $shipment_id)
    {
        $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\Shipment';
        $request = $this->getShipmentRequest($inbound_plan_id, $shipment_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getShipment'
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws InvalidArgumentException
     */
    public function getShipmentRequest($inbound_plan_id, $shipment_id)
    {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling getShipment'
            );
        }
        if (strlen($inbound_plan_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.getShipment, must be smaller than or equal to 38.'
            );
        }
        if (strlen($inbound_plan_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.getShipment, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inbound_plan_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"inbound_plan_id\" when calling FbaInboundApi.getShipment, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling getShipment'
            );
        }
        if (strlen($shipment_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$shipment_id" when calling FbaInboundApi.getShipment, must be smaller than or equal to 38.'
            );
        }
        if (strlen($shipment_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$shipment_id" when calling FbaInboundApi.getShipment, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $shipment_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"shipment_id\" when calling FbaInboundApi.getShipment, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }


        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer2024::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }
        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer2024::toPathValue($shipment_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getShipmentContentUpdatePreview
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param string $content_update_preview_id Identifier of a content update preview. (required)
     *
     * @return ContentUpdatePreview| ErrorList
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function getShipmentContentUpdatePreview($inbound_plan_id, $shipment_id, $content_update_preview_id)
    {
        list($response) = $this->getShipmentContentUpdatePreviewWithHttpInfo(
            $inbound_plan_id,
            $shipment_id,
            $content_update_preview_id
        );
        return $response;
    }

    /**
     * Operation getShipmentContentUpdatePreviewWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param string $content_update_preview_id Identifier of a content update preview. (required)
     *
     * @return array of \Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ContentUpdatePreview|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function getShipmentContentUpdatePreviewWithHttpInfo(
        $inbound_plan_id,
        $shipment_id,
        $content_update_preview_id
    ) {
        $request = $this->getShipmentContentUpdatePreviewRequest(
            $inbound_plan_id,
            $shipment_id,
            $content_update_preview_id
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ContentUpdatePreview' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ContentUpdatePreview',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ContentUpdatePreview';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string)$response->getBody();
            }

            return [
                ObjectSerializer2024::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ContentUpdatePreview',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getShipmentContentUpdatePreviewAsync
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param string $content_update_preview_id Identifier of a content update preview. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function getShipmentContentUpdatePreviewAsync($inbound_plan_id, $shipment_id, $content_update_preview_id)
    {
        return $this->getShipmentContentUpdatePreviewAsyncWithHttpInfo(
            $inbound_plan_id,
            $shipment_id,
            $content_update_preview_id
        )
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getShipmentContentUpdatePreviewAsyncWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param string $content_update_preview_id Identifier of a content update preview. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function getShipmentContentUpdatePreviewAsyncWithHttpInfo(
        $inbound_plan_id,
        $shipment_id,
        $content_update_preview_id
    ) {
        $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ContentUpdatePreview';
        $request = $this->getShipmentContentUpdatePreviewRequest(
            $inbound_plan_id,
            $shipment_id,
            $content_update_preview_id
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getShipmentContentUpdatePreview'
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param string $content_update_preview_id Identifier of a content update preview. (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws InvalidArgumentException
     */
    public function getShipmentContentUpdatePreviewRequest($inbound_plan_id, $shipment_id, $content_update_preview_id)
    {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling getShipmentContentUpdatePreview'
            );
        }
        if (strlen($inbound_plan_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.getShipmentContentUpdatePreview, must be smaller than or equal to 38.'
            );
        }
        if (strlen($inbound_plan_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.getShipmentContentUpdatePreview, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inbound_plan_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"inbound_plan_id\" when calling FbaInboundApi.getShipmentContentUpdatePreview, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling getShipmentContentUpdatePreview'
            );
        }
        if (strlen($shipment_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$shipment_id" when calling FbaInboundApi.getShipmentContentUpdatePreview, must be smaller than or equal to 38.'
            );
        }
        if (strlen($shipment_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$shipment_id" when calling FbaInboundApi.getShipmentContentUpdatePreview, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $shipment_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"shipment_id\" when calling FbaInboundApi.getShipmentContentUpdatePreview, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'content_update_preview_id' is set
        if ($content_update_preview_id === null || (is_array($content_update_preview_id) && count(
                    $content_update_preview_id
                ) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $content_update_preview_id when calling getShipmentContentUpdatePreview'
            );
        }
        if (strlen($content_update_preview_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$content_update_preview_id" when calling FbaInboundApi.getShipmentContentUpdatePreview, must be smaller than or equal to 38.'
            );
        }
        if (strlen($content_update_preview_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$content_update_preview_id" when calling FbaInboundApi.getShipmentContentUpdatePreview, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $content_update_preview_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"content_update_preview_id\" when calling FbaInboundApi.getShipmentContentUpdatePreview, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }


        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews/{contentUpdatePreviewId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer2024::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }
        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer2024::toPathValue($shipment_id),
                $resourcePath
            );
        }
        // path params
        if ($content_update_preview_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contentUpdatePreviewId' . '}',
                ObjectSerializer2024::toPathValue($content_update_preview_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listDeliveryWindowOptions
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id The shipment to get delivery window options for. (required)
     * @param int $page_size The number of delivery window options to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return ListDeliveryWindowOptionsResponse| ErrorList
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function listDeliveryWindowOptions($inbound_plan_id, $shipment_id, $page_size = 10, $pagination_token = null)
    {
        list($response) = $this->listDeliveryWindowOptionsWithHttpInfo(
            $inbound_plan_id,
            $shipment_id,
            $page_size,
            $pagination_token
        );
        return $response;
    }

    /**
     * Operation listDeliveryWindowOptionsWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id The shipment to get delivery window options for. (required)
     * @param int $page_size The number of delivery window options to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return array of \Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListDeliveryWindowOptionsResponse|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function listDeliveryWindowOptionsWithHttpInfo(
        $inbound_plan_id,
        $shipment_id,
        $page_size = 10,
        $pagination_token = null
    ) {
        $request = $this->listDeliveryWindowOptionsRequest(
            $inbound_plan_id,
            $shipment_id,
            $page_size,
            $pagination_token
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListDeliveryWindowOptionsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListDeliveryWindowOptionsResponse',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListDeliveryWindowOptionsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string)$response->getBody();
            }

            return [
                ObjectSerializer2024::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListDeliveryWindowOptionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listDeliveryWindowOptionsAsync
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id The shipment to get delivery window options for. (required)
     * @param int $page_size The number of delivery window options to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function listDeliveryWindowOptionsAsync(
        $inbound_plan_id,
        $shipment_id,
        $page_size = 10,
        $pagination_token = null
    ) {
        return $this->listDeliveryWindowOptionsAsyncWithHttpInfo(
            $inbound_plan_id,
            $shipment_id,
            $page_size,
            $pagination_token
        )
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listDeliveryWindowOptionsAsyncWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id The shipment to get delivery window options for. (required)
     * @param int $page_size The number of delivery window options to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function listDeliveryWindowOptionsAsyncWithHttpInfo(
        $inbound_plan_id,
        $shipment_id,
        $page_size = 10,
        $pagination_token = null
    ) {
        $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListDeliveryWindowOptionsResponse';
        $request = $this->listDeliveryWindowOptionsRequest(
            $inbound_plan_id,
            $shipment_id,
            $page_size,
            $pagination_token
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listDeliveryWindowOptions'
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id The shipment to get delivery window options for. (required)
     * @param int $page_size The number of delivery window options to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws InvalidArgumentException
     */
    public function listDeliveryWindowOptionsRequest(
        $inbound_plan_id,
        $shipment_id,
        $page_size = 10,
        $pagination_token = null
    ) {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling listDeliveryWindowOptions'
            );
        }
        if (strlen($inbound_plan_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.listDeliveryWindowOptions, must be smaller than or equal to 38.'
            );
        }
        if (strlen($inbound_plan_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.listDeliveryWindowOptions, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inbound_plan_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"inbound_plan_id\" when calling FbaInboundApi.listDeliveryWindowOptions, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling listDeliveryWindowOptions'
            );
        }
        if (strlen($shipment_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$shipment_id" when calling FbaInboundApi.listDeliveryWindowOptions, must be smaller than or equal to 38.'
            );
        }
        if (strlen($shipment_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$shipment_id" when calling FbaInboundApi.listDeliveryWindowOptions, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $shipment_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"shipment_id\" when calling FbaInboundApi.listDeliveryWindowOptions, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        if ($page_size !== null && $page_size > 100) {
            throw new InvalidArgumentException(
                'invalid value for "$page_size" when calling FbaInboundApi.listDeliveryWindowOptions, must be smaller than or equal to 100.'
            );
        }
        if ($page_size !== null && $page_size < 1) {
            throw new InvalidArgumentException(
                'invalid value for "$page_size" when calling FbaInboundApi.listDeliveryWindowOptions, must be bigger than or equal to 1.'
            );
        }

        if ($pagination_token !== null && strlen($pagination_token) > 1024) {
            throw new InvalidArgumentException(
                'invalid length for "$pagination_token" when calling FbaInboundApi.listDeliveryWindowOptions, must be smaller than or equal to 1024.'
            );
        }
        if ($pagination_token !== null && strlen($pagination_token) < 0) {
            throw new InvalidArgumentException(
                'invalid length for "$pagination_token" when calling FbaInboundApi.listDeliveryWindowOptions, must be bigger than or equal to 0.'
            );
        }


        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($page_size)) {
            $page_size = ObjectSerializer2024::serializeCollection($page_size, '', true);
        }
        if ($page_size !== null) {
            $queryParams['pageSize'] = $page_size;
        }
        // query params
        if (is_array($pagination_token)) {
            $pagination_token = ObjectSerializer2024::serializeCollection($pagination_token, '', true);
        }
        if ($pagination_token !== null) {
            $queryParams['paginationToken'] = $pagination_token;
        }


        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer2024::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }
        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer2024::toPathValue($shipment_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listInboundPlanBoxes
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param int $page_size The number of boxes to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return ListInboundPlanBoxesResponse| ErrorList
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function listInboundPlanBoxes($inbound_plan_id, $page_size = 10, $pagination_token = null)
    {
        list($response) = $this->listInboundPlanBoxesWithHttpInfo($inbound_plan_id, $page_size, $pagination_token);
        return $response;
    }

    /**
     * Operation listInboundPlanBoxesWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param int $page_size The number of boxes to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return array of \Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListInboundPlanBoxesResponse|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function listInboundPlanBoxesWithHttpInfo($inbound_plan_id, $page_size = 10, $pagination_token = null)
    {
        $request = $this->listInboundPlanBoxesRequest($inbound_plan_id, $page_size, $pagination_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListInboundPlanBoxesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListInboundPlanBoxesResponse',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListInboundPlanBoxesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string)$response->getBody();
            }

            return [
                ObjectSerializer2024::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListInboundPlanBoxesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listInboundPlanBoxesAsync
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param int $page_size The number of boxes to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function listInboundPlanBoxesAsync($inbound_plan_id, $page_size = 10, $pagination_token = null)
    {
        return $this->listInboundPlanBoxesAsyncWithHttpInfo($inbound_plan_id, $page_size, $pagination_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listInboundPlanBoxesAsyncWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param int $page_size The number of boxes to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function listInboundPlanBoxesAsyncWithHttpInfo($inbound_plan_id, $page_size = 10, $pagination_token = null)
    {
        $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListInboundPlanBoxesResponse';
        $request = $this->listInboundPlanBoxesRequest($inbound_plan_id, $page_size, $pagination_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listInboundPlanBoxes'
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param int $page_size The number of boxes to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws InvalidArgumentException
     */
    public function listInboundPlanBoxesRequest($inbound_plan_id, $page_size = 10, $pagination_token = null)
    {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling listInboundPlanBoxes'
            );
        }
        if (strlen($inbound_plan_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.listInboundPlanBoxes, must be smaller than or equal to 38.'
            );
        }
        if (strlen($inbound_plan_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.listInboundPlanBoxes, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inbound_plan_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"inbound_plan_id\" when calling FbaInboundApi.listInboundPlanBoxes, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        if ($page_size !== null && $page_size > 1000) {
            throw new InvalidArgumentException(
                'invalid value for "$page_size" when calling FbaInboundApi.listInboundPlanBoxes, must be smaller than or equal to 1000.'
            );
        }
        if ($page_size !== null && $page_size < 1) {
            throw new InvalidArgumentException(
                'invalid value for "$page_size" when calling FbaInboundApi.listInboundPlanBoxes, must be bigger than or equal to 1.'
            );
        }

        if ($pagination_token !== null && strlen($pagination_token) > 1024) {
            throw new InvalidArgumentException(
                'invalid length for "$pagination_token" when calling FbaInboundApi.listInboundPlanBoxes, must be smaller than or equal to 1024.'
            );
        }
        if ($pagination_token !== null && strlen($pagination_token) < 0) {
            throw new InvalidArgumentException(
                'invalid length for "$pagination_token" when calling FbaInboundApi.listInboundPlanBoxes, must be bigger than or equal to 0.'
            );
        }


        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/boxes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($page_size)) {
            $page_size = ObjectSerializer2024::serializeCollection($page_size, '', true);
        }
        if ($page_size !== null) {
            $queryParams['pageSize'] = $page_size;
        }
        // query params
        if (is_array($pagination_token)) {
            $pagination_token = ObjectSerializer2024::serializeCollection($pagination_token, '', true);
        }
        if ($pagination_token !== null) {
            $queryParams['paginationToken'] = $pagination_token;
        }


        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer2024::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listInboundPlanItems
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param int $page_size The number of items to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return ListInboundPlanItemsResponse| ErrorList
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function listInboundPlanItems($inbound_plan_id, $page_size = 10, $pagination_token = null)
    {
        list($response) = $this->listInboundPlanItemsWithHttpInfo($inbound_plan_id, $page_size, $pagination_token);
        return $response;
    }

    /**
     * Operation listInboundPlanItemsWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param int $page_size The number of items to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return array of \Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListInboundPlanItemsResponse|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function listInboundPlanItemsWithHttpInfo($inbound_plan_id, $page_size = 10, $pagination_token = null)
    {
        $request = $this->listInboundPlanItemsRequest($inbound_plan_id, $page_size, $pagination_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListInboundPlanItemsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListInboundPlanItemsResponse',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListInboundPlanItemsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string)$response->getBody();
            }

            return [
                ObjectSerializer2024::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListInboundPlanItemsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listInboundPlanItemsAsync
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param int $page_size The number of items to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function listInboundPlanItemsAsync($inbound_plan_id, $page_size = 10, $pagination_token = null)
    {
        return $this->listInboundPlanItemsAsyncWithHttpInfo($inbound_plan_id, $page_size, $pagination_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listInboundPlanItemsAsyncWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param int $page_size The number of items to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function listInboundPlanItemsAsyncWithHttpInfo($inbound_plan_id, $page_size = 10, $pagination_token = null)
    {
        $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListInboundPlanItemsResponse';
        $request = $this->listInboundPlanItemsRequest($inbound_plan_id, $page_size, $pagination_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listInboundPlanItems'
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param int $page_size The number of items to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws InvalidArgumentException
     */
    public function listInboundPlanItemsRequest($inbound_plan_id, $page_size = 10, $pagination_token = null)
    {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling listInboundPlanItems'
            );
        }
        if (strlen($inbound_plan_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.listInboundPlanItems, must be smaller than or equal to 38.'
            );
        }
        if (strlen($inbound_plan_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.listInboundPlanItems, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inbound_plan_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"inbound_plan_id\" when calling FbaInboundApi.listInboundPlanItems, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        if ($page_size !== null && $page_size > 1000) {
            throw new InvalidArgumentException(
                'invalid value for "$page_size" when calling FbaInboundApi.listInboundPlanItems, must be smaller than or equal to 1000.'
            );
        }
        if ($page_size !== null && $page_size < 1) {
            throw new InvalidArgumentException(
                'invalid value for "$page_size" when calling FbaInboundApi.listInboundPlanItems, must be bigger than or equal to 1.'
            );
        }

        if ($pagination_token !== null && strlen($pagination_token) > 1024) {
            throw new InvalidArgumentException(
                'invalid length for "$pagination_token" when calling FbaInboundApi.listInboundPlanItems, must be smaller than or equal to 1024.'
            );
        }
        if ($pagination_token !== null && strlen($pagination_token) < 0) {
            throw new InvalidArgumentException(
                'invalid length for "$pagination_token" when calling FbaInboundApi.listInboundPlanItems, must be bigger than or equal to 0.'
            );
        }


        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($page_size)) {
            $page_size = ObjectSerializer2024::serializeCollection($page_size, '', true);
        }
        if ($page_size !== null) {
            $queryParams['pageSize'] = $page_size;
        }
        // query params
        if (is_array($pagination_token)) {
            $pagination_token = ObjectSerializer2024::serializeCollection($pagination_token, '', true);
        }
        if ($pagination_token !== null) {
            $queryParams['paginationToken'] = $pagination_token;
        }


        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer2024::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listInboundPlanPallets
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param int $page_size The number of pallets to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return ListInboundPlanPalletsResponse| ErrorList
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function listInboundPlanPallets($inbound_plan_id, $page_size = 10, $pagination_token = null)
    {
        list($response) = $this->listInboundPlanPalletsWithHttpInfo($inbound_plan_id, $page_size, $pagination_token);
        return $response;
    }

    /**
     * Operation listInboundPlanPalletsWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param int $page_size The number of pallets to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return array of \Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListInboundPlanPalletsResponse|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function listInboundPlanPalletsWithHttpInfo($inbound_plan_id, $page_size = 10, $pagination_token = null)
    {
        $request = $this->listInboundPlanPalletsRequest($inbound_plan_id, $page_size, $pagination_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListInboundPlanPalletsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListInboundPlanPalletsResponse',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListInboundPlanPalletsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string)$response->getBody();
            }

            return [
                ObjectSerializer2024::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListInboundPlanPalletsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listInboundPlanPalletsAsync
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param int $page_size The number of pallets to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function listInboundPlanPalletsAsync($inbound_plan_id, $page_size = 10, $pagination_token = null)
    {
        return $this->listInboundPlanPalletsAsyncWithHttpInfo($inbound_plan_id, $page_size, $pagination_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listInboundPlanPalletsAsyncWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param int $page_size The number of pallets to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function listInboundPlanPalletsAsyncWithHttpInfo($inbound_plan_id, $page_size = 10, $pagination_token = null)
    {
        $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListInboundPlanPalletsResponse';
        $request = $this->listInboundPlanPalletsRequest($inbound_plan_id, $page_size, $pagination_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listInboundPlanPallets'
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param int $page_size The number of pallets to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws InvalidArgumentException
     */
    public function listInboundPlanPalletsRequest($inbound_plan_id, $page_size = 10, $pagination_token = null)
    {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling listInboundPlanPallets'
            );
        }
        if (strlen($inbound_plan_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.listInboundPlanPallets, must be smaller than or equal to 38.'
            );
        }
        if (strlen($inbound_plan_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.listInboundPlanPallets, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inbound_plan_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"inbound_plan_id\" when calling FbaInboundApi.listInboundPlanPallets, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        if ($page_size !== null && $page_size > 1000) {
            throw new InvalidArgumentException(
                'invalid value for "$page_size" when calling FbaInboundApi.listInboundPlanPallets, must be smaller than or equal to 1000.'
            );
        }
        if ($page_size !== null && $page_size < 1) {
            throw new InvalidArgumentException(
                'invalid value for "$page_size" when calling FbaInboundApi.listInboundPlanPallets, must be bigger than or equal to 1.'
            );
        }

        if ($pagination_token !== null && strlen($pagination_token) > 1024) {
            throw new InvalidArgumentException(
                'invalid length for "$pagination_token" when calling FbaInboundApi.listInboundPlanPallets, must be smaller than or equal to 1024.'
            );
        }
        if ($pagination_token !== null && strlen($pagination_token) < 0) {
            throw new InvalidArgumentException(
                'invalid length for "$pagination_token" when calling FbaInboundApi.listInboundPlanPallets, must be bigger than or equal to 0.'
            );
        }


        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/pallets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($page_size)) {
            $page_size = ObjectSerializer2024::serializeCollection($page_size, '', true);
        }
        if ($page_size !== null) {
            $queryParams['pageSize'] = $page_size;
        }
        // query params
        if (is_array($pagination_token)) {
            $pagination_token = ObjectSerializer2024::serializeCollection($pagination_token, '', true);
        }
        if ($pagination_token !== null) {
            $queryParams['paginationToken'] = $pagination_token;
        }


        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer2024::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listInboundPlans
     *
     * @param int $page_size The number of inbound plans to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     * @param string $status The status of an inbound plan. (optional)
     * @param string $sort_by Sort by field. (optional)
     * @param string $sort_order The sort order. (optional)
     *
     * @return ListInboundPlansResponse| ErrorList
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function listInboundPlans(
        $page_size = 10,
        $pagination_token = null,
        $status = null,
        $sort_by = null,
        $sort_order = null
    ) {
        list($response) = $this->listInboundPlansWithHttpInfo(
            $page_size,
            $pagination_token,
            $status,
            $sort_by,
            $sort_order
        );
        return $response;
    }

    /**
     * Operation listInboundPlansWithHttpInfo
     *
     * @param int $page_size The number of inbound plans to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     * @param string $status The status of an inbound plan. (optional)
     * @param string $sort_by Sort by field. (optional)
     * @param string $sort_order The sort order. (optional)
     *
     * @return array of \Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListInboundPlansResponse|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function listInboundPlansWithHttpInfo(
        $page_size = 10,
        $pagination_token = null,
        $status = null,
        $sort_by = null,
        $sort_order = null
    ) {
        $request = $this->listInboundPlansRequest($page_size, $pagination_token, $status, $sort_by, $sort_order);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListInboundPlansResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListInboundPlansResponse',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListInboundPlansResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string)$response->getBody();
            }

            return [
                ObjectSerializer2024::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListInboundPlansResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listInboundPlansAsync
     *
     * @param int $page_size The number of inbound plans to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     * @param string $status The status of an inbound plan. (optional)
     * @param string $sort_by Sort by field. (optional)
     * @param string $sort_order The sort order. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function listInboundPlansAsync(
        $page_size = 10,
        $pagination_token = null,
        $status = null,
        $sort_by = null,
        $sort_order = null
    ) {
        return $this->listInboundPlansAsyncWithHttpInfo($page_size, $pagination_token, $status, $sort_by, $sort_order)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listInboundPlansAsyncWithHttpInfo
     *
     * @param int $page_size The number of inbound plans to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     * @param string $status The status of an inbound plan. (optional)
     * @param string $sort_by Sort by field. (optional)
     * @param string $sort_order The sort order. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function listInboundPlansAsyncWithHttpInfo(
        $page_size = 10,
        $pagination_token = null,
        $status = null,
        $sort_by = null,
        $sort_order = null
    ) {
        $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListInboundPlansResponse';
        $request = $this->listInboundPlansRequest($page_size, $pagination_token, $status, $sort_by, $sort_order);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listInboundPlans'
     *
     * @param int $page_size The number of inbound plans to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     * @param string $status The status of an inbound plan. (optional)
     * @param string $sort_by Sort by field. (optional)
     * @param string $sort_order The sort order. (optional)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws InvalidArgumentException
     */
    public function listInboundPlansRequest(
        $page_size = 10,
        $pagination_token = null,
        $status = null,
        $sort_by = null,
        $sort_order = null
    ) {
        if ($page_size !== null && $page_size > 30) {
            throw new InvalidArgumentException(
                'invalid value for "$page_size" when calling FbaInboundApi.listInboundPlans, must be smaller than or equal to 30.'
            );
        }
        if ($page_size !== null && $page_size < 1) {
            throw new InvalidArgumentException(
                'invalid value for "$page_size" when calling FbaInboundApi.listInboundPlans, must be bigger than or equal to 1.'
            );
        }

        if ($pagination_token !== null && strlen($pagination_token) > 1024) {
            throw new InvalidArgumentException(
                'invalid length for "$pagination_token" when calling FbaInboundApi.listInboundPlans, must be smaller than or equal to 1024.'
            );
        }
        if ($pagination_token !== null && strlen($pagination_token) < 0) {
            throw new InvalidArgumentException(
                'invalid length for "$pagination_token" when calling FbaInboundApi.listInboundPlans, must be bigger than or equal to 0.'
            );
        }


        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($page_size)) {
            $page_size = ObjectSerializer2024::serializeCollection($page_size, '', true);
        }
        if ($page_size !== null) {
            $queryParams['pageSize'] = $page_size;
        }
        // query params
        if (is_array($pagination_token)) {
            $pagination_token = ObjectSerializer2024::serializeCollection($pagination_token, '', true);
        }
        if ($pagination_token !== null) {
            $queryParams['paginationToken'] = $pagination_token;
        }
        // query params
        if (is_array($status)) {
            $status = ObjectSerializer2024::serializeCollection($status, '', true);
        }
        if ($status !== null) {
            $queryParams['status'] = $status;
        }
        // query params
        if (is_array($sort_by)) {
            $sort_by = ObjectSerializer2024::serializeCollection($sort_by, '', true);
        }
        if ($sort_by !== null) {
            $queryParams['sortBy'] = $sort_by;
        }
        // query params
        if (is_array($sort_order)) {
            $sort_order = ObjectSerializer2024::serializeCollection($sort_order, '', true);
        }
        if ($sort_order !== null) {
            $queryParams['sortOrder'] = $sort_order;
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listItemComplianceDetails
     *
     * @param string[] $mskus List of merchant SKUs - a merchant-supplied identifier for a specific SKU. (required)
     * @param string $marketplace_id The Marketplace ID. Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) for a list of possible values. (required)
     *
     * @return ListItemComplianceDetailsResponse| ErrorList
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function listItemComplianceDetails($mskus, $marketplace_id)
    {
        list($response) = $this->listItemComplianceDetailsWithHttpInfo($mskus, $marketplace_id);
        return $response;
    }

    /**
     * Operation listItemComplianceDetailsWithHttpInfo
     *
     * @param string[] $mskus List of merchant SKUs - a merchant-supplied identifier for a specific SKU. (required)
     * @param string $marketplace_id The Marketplace ID. Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) for a list of possible values. (required)
     *
     * @return array of \Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListItemComplianceDetailsResponse|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function listItemComplianceDetailsWithHttpInfo($mskus, $marketplace_id)
    {
        $request = $this->listItemComplianceDetailsRequest($mskus, $marketplace_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListItemComplianceDetailsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListItemComplianceDetailsResponse',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListItemComplianceDetailsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string)$response->getBody();
            }

            return [
                ObjectSerializer2024::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListItemComplianceDetailsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listItemComplianceDetailsAsync
     *
     * @param string[] $mskus List of merchant SKUs - a merchant-supplied identifier for a specific SKU. (required)
     * @param string $marketplace_id The Marketplace ID. Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) for a list of possible values. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function listItemComplianceDetailsAsync($mskus, $marketplace_id)
    {
        return $this->listItemComplianceDetailsAsyncWithHttpInfo($mskus, $marketplace_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listItemComplianceDetailsAsyncWithHttpInfo
     *
     * @param string[] $mskus List of merchant SKUs - a merchant-supplied identifier for a specific SKU. (required)
     * @param string $marketplace_id The Marketplace ID. Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) for a list of possible values. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function listItemComplianceDetailsAsyncWithHttpInfo($mskus, $marketplace_id)
    {
        $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListItemComplianceDetailsResponse';
        $request = $this->listItemComplianceDetailsRequest($mskus, $marketplace_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listItemComplianceDetails'
     *
     * @param string[] $mskus List of merchant SKUs - a merchant-supplied identifier for a specific SKU. (required)
     * @param string $marketplace_id The Marketplace ID. Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) for a list of possible values. (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws InvalidArgumentException
     */
    public function listItemComplianceDetailsRequest($mskus, $marketplace_id)
    {
        // verify the required parameter 'mskus' is set
        if ($mskus === null || (is_array($mskus) && count($mskus) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $mskus when calling listItemComplianceDetails'
            );
        }
        if (count($mskus) > 100) {
            throw new InvalidArgumentException(
                'invalid value for "$mskus" when calling FbaInboundApi.listItemComplianceDetails, number of items must be less than or equal to 100.'
            );
        }
        if (count($mskus) < 1) {
            throw new InvalidArgumentException(
                'invalid value for "$mskus" when calling FbaInboundApi.listItemComplianceDetails, number of items must be greater than or equal to 1.'
            );
        }

        // verify the required parameter 'marketplace_id' is set
        if ($marketplace_id === null || (is_array($marketplace_id) && count($marketplace_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $marketplace_id when calling listItemComplianceDetails'
            );
        }
        if (strlen($marketplace_id) > 256) {
            throw new InvalidArgumentException(
                'invalid length for "$marketplace_id" when calling FbaInboundApi.listItemComplianceDetails, must be smaller than or equal to 256.'
            );
        }
        if (strlen($marketplace_id) < 1) {
            throw new InvalidArgumentException(
                'invalid length for "$marketplace_id" when calling FbaInboundApi.listItemComplianceDetails, must be bigger than or equal to 1.'
            );
        }


        $resourcePath = '/inbound/fba/2024-03-20/items/compliance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($mskus !== null) {
            if ('form' === 'form' && is_array($mskus)) {
                foreach ($mskus as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['mskus'] = $mskus;
            }
        }
        // query params
        if (is_array($marketplace_id)) {
            $marketplace_id = ObjectSerializer2024::serializeCollection($marketplace_id, '', true);
        }
        if ($marketplace_id !== null) {
            $queryParams['marketplaceId'] = $marketplace_id;
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listPackingGroupBoxes
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $packing_group_id Identifier of a packing group. (required)
     * @param int $page_size The number of packing group boxes to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return ListPackingGroupBoxesResponse| ErrorList
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function listPackingGroupBoxes(
        $inbound_plan_id,
        $packing_group_id,
        $page_size = 10,
        $pagination_token = null
    ) {
        list($response) = $this->listPackingGroupBoxesWithHttpInfo(
            $inbound_plan_id,
            $packing_group_id,
            $page_size,
            $pagination_token
        );
        return $response;
    }

    /**
     * Operation listPackingGroupBoxesWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $packing_group_id Identifier of a packing group. (required)
     * @param int $page_size The number of packing group boxes to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return array of \Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListPackingGroupBoxesResponse|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function listPackingGroupBoxesWithHttpInfo(
        $inbound_plan_id,
        $packing_group_id,
        $page_size = 10,
        $pagination_token = null
    ) {
        $request = $this->listPackingGroupBoxesRequest(
            $inbound_plan_id,
            $packing_group_id,
            $page_size,
            $pagination_token
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListPackingGroupBoxesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListPackingGroupBoxesResponse',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListPackingGroupBoxesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string)$response->getBody();
            }

            return [
                ObjectSerializer2024::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListPackingGroupBoxesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listPackingGroupBoxesAsync
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $packing_group_id Identifier of a packing group. (required)
     * @param int $page_size The number of packing group boxes to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function listPackingGroupBoxesAsync(
        $inbound_plan_id,
        $packing_group_id,
        $page_size = 10,
        $pagination_token = null
    ) {
        return $this->listPackingGroupBoxesAsyncWithHttpInfo(
            $inbound_plan_id,
            $packing_group_id,
            $page_size,
            $pagination_token
        )
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listPackingGroupBoxesAsyncWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $packing_group_id Identifier of a packing group. (required)
     * @param int $page_size The number of packing group boxes to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function listPackingGroupBoxesAsyncWithHttpInfo(
        $inbound_plan_id,
        $packing_group_id,
        $page_size = 10,
        $pagination_token = null
    ) {
        $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListPackingGroupBoxesResponse';
        $request = $this->listPackingGroupBoxesRequest(
            $inbound_plan_id,
            $packing_group_id,
            $page_size,
            $pagination_token
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listPackingGroupBoxes'
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $packing_group_id Identifier of a packing group. (required)
     * @param int $page_size The number of packing group boxes to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws InvalidArgumentException
     */
    public function listPackingGroupBoxesRequest(
        $inbound_plan_id,
        $packing_group_id,
        $page_size = 10,
        $pagination_token = null
    ) {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling listPackingGroupBoxes'
            );
        }
        if (strlen($inbound_plan_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.listPackingGroupBoxes, must be smaller than or equal to 38.'
            );
        }
        if (strlen($inbound_plan_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.listPackingGroupBoxes, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inbound_plan_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"inbound_plan_id\" when calling FbaInboundApi.listPackingGroupBoxes, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'packing_group_id' is set
        if ($packing_group_id === null || (is_array($packing_group_id) && count($packing_group_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $packing_group_id when calling listPackingGroupBoxes'
            );
        }
        if (strlen($packing_group_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$packing_group_id" when calling FbaInboundApi.listPackingGroupBoxes, must be smaller than or equal to 38.'
            );
        }
        if (strlen($packing_group_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$packing_group_id" when calling FbaInboundApi.listPackingGroupBoxes, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $packing_group_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"packing_group_id\" when calling FbaInboundApi.listPackingGroupBoxes, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        if ($page_size !== null && $page_size > 100) {
            throw new InvalidArgumentException(
                'invalid value for "$page_size" when calling FbaInboundApi.listPackingGroupBoxes, must be smaller than or equal to 100.'
            );
        }
        if ($page_size !== null && $page_size < 1) {
            throw new InvalidArgumentException(
                'invalid value for "$page_size" when calling FbaInboundApi.listPackingGroupBoxes, must be bigger than or equal to 1.'
            );
        }

        if ($pagination_token !== null && strlen($pagination_token) > 1024) {
            throw new InvalidArgumentException(
                'invalid length for "$pagination_token" when calling FbaInboundApi.listPackingGroupBoxes, must be smaller than or equal to 1024.'
            );
        }
        if ($pagination_token !== null && strlen($pagination_token) < 0) {
            throw new InvalidArgumentException(
                'invalid length for "$pagination_token" when calling FbaInboundApi.listPackingGroupBoxes, must be bigger than or equal to 0.'
            );
        }


        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingGroups/{packingGroupId}/boxes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($page_size)) {
            $page_size = ObjectSerializer2024::serializeCollection($page_size, '', true);
        }
        if ($page_size !== null) {
            $queryParams['pageSize'] = $page_size;
        }
        // query params
        if (is_array($pagination_token)) {
            $pagination_token = ObjectSerializer2024::serializeCollection($pagination_token, '', true);
        }
        if ($pagination_token !== null) {
            $queryParams['paginationToken'] = $pagination_token;
        }


        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer2024::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }
        // path params
        if ($packing_group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'packingGroupId' . '}',
                ObjectSerializer2024::toPathValue($packing_group_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listPackingGroupItems
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $packing_group_id Identifier of a packing group. (required)
     * @param int $page_size The number of packing group items to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return ListPackingGroupItemsResponse| ErrorList
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function listPackingGroupItems(
        $inbound_plan_id,
        $packing_group_id,
        $page_size = 10,
        $pagination_token = null
    ) {
        list($response) = $this->listPackingGroupItemsWithHttpInfo(
            $inbound_plan_id,
            $packing_group_id,
            $page_size,
            $pagination_token
        );
        return $response;
    }

    /**
     * Operation listPackingGroupItemsWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $packing_group_id Identifier of a packing group. (required)
     * @param int $page_size The number of packing group items to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return array of \Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListPackingGroupItemsResponse|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function listPackingGroupItemsWithHttpInfo(
        $inbound_plan_id,
        $packing_group_id,
        $page_size = 10,
        $pagination_token = null
    ) {
        $request = $this->listPackingGroupItemsRequest(
            $inbound_plan_id,
            $packing_group_id,
            $page_size,
            $pagination_token
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListPackingGroupItemsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListPackingGroupItemsResponse',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListPackingGroupItemsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string)$response->getBody();
            }

            return [
                ObjectSerializer2024::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListPackingGroupItemsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listPackingGroupItemsAsync
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $packing_group_id Identifier of a packing group. (required)
     * @param int $page_size The number of packing group items to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function listPackingGroupItemsAsync(
        $inbound_plan_id,
        $packing_group_id,
        $page_size = 10,
        $pagination_token = null
    ) {
        return $this->listPackingGroupItemsAsyncWithHttpInfo(
            $inbound_plan_id,
            $packing_group_id,
            $page_size,
            $pagination_token
        )
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listPackingGroupItemsAsyncWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $packing_group_id Identifier of a packing group. (required)
     * @param int $page_size The number of packing group items to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function listPackingGroupItemsAsyncWithHttpInfo(
        $inbound_plan_id,
        $packing_group_id,
        $page_size = 10,
        $pagination_token = null
    ) {
        $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListPackingGroupItemsResponse';
        $request = $this->listPackingGroupItemsRequest(
            $inbound_plan_id,
            $packing_group_id,
            $page_size,
            $pagination_token
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listPackingGroupItems'
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $packing_group_id Identifier of a packing group. (required)
     * @param int $page_size The number of packing group items to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws InvalidArgumentException
     */
    public function listPackingGroupItemsRequest(
        $inbound_plan_id,
        $packing_group_id,
        $page_size = 10,
        $pagination_token = null
    ) {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling listPackingGroupItems'
            );
        }
        if (strlen($inbound_plan_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.listPackingGroupItems, must be smaller than or equal to 38.'
            );
        }
        if (strlen($inbound_plan_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.listPackingGroupItems, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inbound_plan_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"inbound_plan_id\" when calling FbaInboundApi.listPackingGroupItems, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'packing_group_id' is set
        if ($packing_group_id === null || (is_array($packing_group_id) && count($packing_group_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $packing_group_id when calling listPackingGroupItems'
            );
        }
        if (strlen($packing_group_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$packing_group_id" when calling FbaInboundApi.listPackingGroupItems, must be smaller than or equal to 38.'
            );
        }
        if (strlen($packing_group_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$packing_group_id" when calling FbaInboundApi.listPackingGroupItems, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $packing_group_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"packing_group_id\" when calling FbaInboundApi.listPackingGroupItems, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        if ($page_size !== null && $page_size > 100) {
            throw new InvalidArgumentException(
                'invalid value for "$page_size" when calling FbaInboundApi.listPackingGroupItems, must be smaller than or equal to 100.'
            );
        }
        if ($page_size !== null && $page_size < 1) {
            throw new InvalidArgumentException(
                'invalid value for "$page_size" when calling FbaInboundApi.listPackingGroupItems, must be bigger than or equal to 1.'
            );
        }

        if ($pagination_token !== null && strlen($pagination_token) > 1024) {
            throw new InvalidArgumentException(
                'invalid length for "$pagination_token" when calling FbaInboundApi.listPackingGroupItems, must be smaller than or equal to 1024.'
            );
        }
        if ($pagination_token !== null && strlen($pagination_token) < 0) {
            throw new InvalidArgumentException(
                'invalid length for "$pagination_token" when calling FbaInboundApi.listPackingGroupItems, must be bigger than or equal to 0.'
            );
        }


        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingGroups/{packingGroupId}/items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($page_size)) {
            $page_size = ObjectSerializer2024::serializeCollection($page_size, '', true);
        }
        if ($page_size !== null) {
            $queryParams['pageSize'] = $page_size;
        }
        // query params
        if (is_array($pagination_token)) {
            $pagination_token = ObjectSerializer2024::serializeCollection($pagination_token, '', true);
        }
        if ($pagination_token !== null) {
            $queryParams['paginationToken'] = $pagination_token;
        }


        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer2024::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }
        // path params
        if ($packing_group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'packingGroupId' . '}',
                ObjectSerializer2024::toPathValue($packing_group_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listPackingOptions
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param int $page_size The number of packing options to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return ListPackingOptionsResponse| ErrorList
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function listPackingOptions($inbound_plan_id, $page_size = 10, $pagination_token = null)
    {
        list($response) = $this->listPackingOptionsWithHttpInfo($inbound_plan_id, $page_size, $pagination_token);
        return $response;
    }

    /**
     * Operation listPackingOptionsWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param int $page_size The number of packing options to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return array of \Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListPackingOptionsResponse|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function listPackingOptionsWithHttpInfo($inbound_plan_id, $page_size = 10, $pagination_token = null)
    {
        $request = $this->listPackingOptionsRequest($inbound_plan_id, $page_size, $pagination_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListPackingOptionsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListPackingOptionsResponse',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListPackingOptionsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string)$response->getBody();
            }

            return [
                ObjectSerializer2024::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListPackingOptionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listPackingOptionsAsync
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param int $page_size The number of packing options to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function listPackingOptionsAsync($inbound_plan_id, $page_size = 10, $pagination_token = null)
    {
        return $this->listPackingOptionsAsyncWithHttpInfo($inbound_plan_id, $page_size, $pagination_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listPackingOptionsAsyncWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param int $page_size The number of packing options to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function listPackingOptionsAsyncWithHttpInfo($inbound_plan_id, $page_size = 10, $pagination_token = null)
    {
        $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListPackingOptionsResponse';
        $request = $this->listPackingOptionsRequest($inbound_plan_id, $page_size, $pagination_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listPackingOptions'
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param int $page_size The number of packing options to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws InvalidArgumentException
     */
    public function listPackingOptionsRequest($inbound_plan_id, $page_size = 10, $pagination_token = null)
    {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling listPackingOptions'
            );
        }
        if (strlen($inbound_plan_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.listPackingOptions, must be smaller than or equal to 38.'
            );
        }
        if (strlen($inbound_plan_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.listPackingOptions, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inbound_plan_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"inbound_plan_id\" when calling FbaInboundApi.listPackingOptions, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        if ($page_size !== null && $page_size > 20) {
            throw new InvalidArgumentException(
                'invalid value for "$page_size" when calling FbaInboundApi.listPackingOptions, must be smaller than or equal to 20.'
            );
        }
        if ($page_size !== null && $page_size < 1) {
            throw new InvalidArgumentException(
                'invalid value for "$page_size" when calling FbaInboundApi.listPackingOptions, must be bigger than or equal to 1.'
            );
        }

        if ($pagination_token !== null && strlen($pagination_token) > 1024) {
            throw new InvalidArgumentException(
                'invalid length for "$pagination_token" when calling FbaInboundApi.listPackingOptions, must be smaller than or equal to 1024.'
            );
        }
        if ($pagination_token !== null && strlen($pagination_token) < 0) {
            throw new InvalidArgumentException(
                'invalid length for "$pagination_token" when calling FbaInboundApi.listPackingOptions, must be bigger than or equal to 0.'
            );
        }


        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($page_size)) {
            $page_size = ObjectSerializer2024::serializeCollection($page_size, '', true);
        }
        if ($page_size !== null) {
            $queryParams['pageSize'] = $page_size;
        }
        // query params
        if (is_array($pagination_token)) {
            $pagination_token = ObjectSerializer2024::serializeCollection($pagination_token, '', true);
        }
        if ($pagination_token !== null) {
            $queryParams['paginationToken'] = $pagination_token;
        }


        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer2024::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listPlacementOptions
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param int $page_size The number of placement options to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return ListPlacementOptionsResponse| ErrorList
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function listPlacementOptions($inbound_plan_id, $page_size = 10, $pagination_token = null)
    {
        list($response) = $this->listPlacementOptionsWithHttpInfo($inbound_plan_id, $page_size, $pagination_token);
        return $response;
    }

    /**
     * Operation listPlacementOptionsWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param int $page_size The number of placement options to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return array of \Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListPlacementOptionsResponse|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function listPlacementOptionsWithHttpInfo($inbound_plan_id, $page_size = 10, $pagination_token = null)
    {
        $request = $this->listPlacementOptionsRequest($inbound_plan_id, $page_size, $pagination_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListPlacementOptionsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListPlacementOptionsResponse',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListPlacementOptionsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string)$response->getBody();
            }

            return [
                ObjectSerializer2024::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListPlacementOptionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listPlacementOptionsAsync
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param int $page_size The number of placement options to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function listPlacementOptionsAsync($inbound_plan_id, $page_size = 10, $pagination_token = null)
    {
        return $this->listPlacementOptionsAsyncWithHttpInfo($inbound_plan_id, $page_size, $pagination_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listPlacementOptionsAsyncWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param int $page_size The number of placement options to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function listPlacementOptionsAsyncWithHttpInfo($inbound_plan_id, $page_size = 10, $pagination_token = null)
    {
        $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListPlacementOptionsResponse';
        $request = $this->listPlacementOptionsRequest($inbound_plan_id, $page_size, $pagination_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listPlacementOptions'
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param int $page_size The number of placement options to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws InvalidArgumentException
     */
    public function listPlacementOptionsRequest($inbound_plan_id, $page_size = 10, $pagination_token = null)
    {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling listPlacementOptions'
            );
        }
        if (strlen($inbound_plan_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.listPlacementOptions, must be smaller than or equal to 38.'
            );
        }
        if (strlen($inbound_plan_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.listPlacementOptions, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inbound_plan_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"inbound_plan_id\" when calling FbaInboundApi.listPlacementOptions, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        if ($page_size !== null && $page_size > 20) {
            throw new InvalidArgumentException(
                'invalid value for "$page_size" when calling FbaInboundApi.listPlacementOptions, must be smaller than or equal to 20.'
            );
        }
        if ($page_size !== null && $page_size < 1) {
            throw new InvalidArgumentException(
                'invalid value for "$page_size" when calling FbaInboundApi.listPlacementOptions, must be bigger than or equal to 1.'
            );
        }

        if ($pagination_token !== null && strlen($pagination_token) > 1024) {
            throw new InvalidArgumentException(
                'invalid length for "$pagination_token" when calling FbaInboundApi.listPlacementOptions, must be smaller than or equal to 1024.'
            );
        }
        if ($pagination_token !== null && strlen($pagination_token) < 0) {
            throw new InvalidArgumentException(
                'invalid length for "$pagination_token" when calling FbaInboundApi.listPlacementOptions, must be bigger than or equal to 0.'
            );
        }


        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($page_size)) {
            $page_size = ObjectSerializer2024::serializeCollection($page_size, '', true);
        }
        if ($page_size !== null) {
            $queryParams['pageSize'] = $page_size;
        }
        // query params
        if (is_array($pagination_token)) {
            $pagination_token = ObjectSerializer2024::serializeCollection($pagination_token, '', true);
        }
        if ($pagination_token !== null) {
            $queryParams['paginationToken'] = $pagination_token;
        }


        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer2024::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listShipmentBoxes
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param int $page_size The number of boxes to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return ListShipmentBoxesResponse| ErrorList
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function listShipmentBoxes($inbound_plan_id, $shipment_id, $page_size = 10, $pagination_token = null)
    {
        list($response) = $this->listShipmentBoxesWithHttpInfo(
            $inbound_plan_id,
            $shipment_id,
            $page_size,
            $pagination_token
        );
        return $response;
    }

    /**
     * Operation listShipmentBoxesWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param int $page_size The number of boxes to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return array of \Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListShipmentBoxesResponse|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function listShipmentBoxesWithHttpInfo(
        $inbound_plan_id,
        $shipment_id,
        $page_size = 10,
        $pagination_token = null
    ) {
        $request = $this->listShipmentBoxesRequest($inbound_plan_id, $shipment_id, $page_size, $pagination_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListShipmentBoxesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListShipmentBoxesResponse',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListShipmentBoxesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string)$response->getBody();
            }

            return [
                ObjectSerializer2024::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListShipmentBoxesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listShipmentBoxesAsync
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param int $page_size The number of boxes to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function listShipmentBoxesAsync($inbound_plan_id, $shipment_id, $page_size = 10, $pagination_token = null)
    {
        return $this->listShipmentBoxesAsyncWithHttpInfo($inbound_plan_id, $shipment_id, $page_size, $pagination_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listShipmentBoxesAsyncWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param int $page_size The number of boxes to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function listShipmentBoxesAsyncWithHttpInfo(
        $inbound_plan_id,
        $shipment_id,
        $page_size = 10,
        $pagination_token = null
    ) {
        $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListShipmentBoxesResponse';
        $request = $this->listShipmentBoxesRequest($inbound_plan_id, $shipment_id, $page_size, $pagination_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listShipmentBoxes'
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param int $page_size The number of boxes to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws InvalidArgumentException
     */
    public function listShipmentBoxesRequest($inbound_plan_id, $shipment_id, $page_size = 10, $pagination_token = null)
    {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling listShipmentBoxes'
            );
        }
        if (strlen($inbound_plan_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.listShipmentBoxes, must be smaller than or equal to 38.'
            );
        }
        if (strlen($inbound_plan_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.listShipmentBoxes, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inbound_plan_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"inbound_plan_id\" when calling FbaInboundApi.listShipmentBoxes, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling listShipmentBoxes'
            );
        }
        if (strlen($shipment_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$shipment_id" when calling FbaInboundApi.listShipmentBoxes, must be smaller than or equal to 38.'
            );
        }
        if (strlen($shipment_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$shipment_id" when calling FbaInboundApi.listShipmentBoxes, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $shipment_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"shipment_id\" when calling FbaInboundApi.listShipmentBoxes, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        if ($page_size !== null && $page_size > 1000) {
            throw new InvalidArgumentException(
                'invalid value for "$page_size" when calling FbaInboundApi.listShipmentBoxes, must be smaller than or equal to 1000.'
            );
        }
        if ($page_size !== null && $page_size < 1) {
            throw new InvalidArgumentException(
                'invalid value for "$page_size" when calling FbaInboundApi.listShipmentBoxes, must be bigger than or equal to 1.'
            );
        }

        if ($pagination_token !== null && strlen($pagination_token) > 1024) {
            throw new InvalidArgumentException(
                'invalid length for "$pagination_token" when calling FbaInboundApi.listShipmentBoxes, must be smaller than or equal to 1024.'
            );
        }
        if ($pagination_token !== null && strlen($pagination_token) < 0) {
            throw new InvalidArgumentException(
                'invalid length for "$pagination_token" when calling FbaInboundApi.listShipmentBoxes, must be bigger than or equal to 0.'
            );
        }


        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/boxes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($page_size)) {
            $page_size = ObjectSerializer2024::serializeCollection($page_size, '', true);
        }
        if ($page_size !== null) {
            $queryParams['pageSize'] = $page_size;
        }
        // query params
        if (is_array($pagination_token)) {
            $pagination_token = ObjectSerializer2024::serializeCollection($pagination_token, '', true);
        }
        if ($pagination_token !== null) {
            $queryParams['paginationToken'] = $pagination_token;
        }


        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer2024::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }
        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer2024::toPathValue($shipment_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listShipmentContentUpdatePreviews
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param int $page_size The number of content update previews to return. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return ListShipmentContentUpdatePreviewsResponse| ErrorList
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function listShipmentContentUpdatePreviews(
        $inbound_plan_id,
        $shipment_id,
        $page_size = 10,
        $pagination_token = null
    ) {
        list($response) = $this->listShipmentContentUpdatePreviewsWithHttpInfo(
            $inbound_plan_id,
            $shipment_id,
            $page_size,
            $pagination_token
        );
        return $response;
    }

    /**
     * Operation listShipmentContentUpdatePreviewsWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param int $page_size The number of content update previews to return. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return array of \Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListShipmentContentUpdatePreviewsResponse|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function listShipmentContentUpdatePreviewsWithHttpInfo(
        $inbound_plan_id,
        $shipment_id,
        $page_size = 10,
        $pagination_token = null
    ) {
        $request = $this->listShipmentContentUpdatePreviewsRequest(
            $inbound_plan_id,
            $shipment_id,
            $page_size,
            $pagination_token
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListShipmentContentUpdatePreviewsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListShipmentContentUpdatePreviewsResponse',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListShipmentContentUpdatePreviewsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string)$response->getBody();
            }

            return [
                ObjectSerializer2024::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListShipmentContentUpdatePreviewsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listShipmentContentUpdatePreviewsAsync
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param int $page_size The number of content update previews to return. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function listShipmentContentUpdatePreviewsAsync(
        $inbound_plan_id,
        $shipment_id,
        $page_size = 10,
        $pagination_token = null
    ) {
        return $this->listShipmentContentUpdatePreviewsAsyncWithHttpInfo(
            $inbound_plan_id,
            $shipment_id,
            $page_size,
            $pagination_token
        )
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listShipmentContentUpdatePreviewsAsyncWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param int $page_size The number of content update previews to return. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function listShipmentContentUpdatePreviewsAsyncWithHttpInfo(
        $inbound_plan_id,
        $shipment_id,
        $page_size = 10,
        $pagination_token = null
    ) {
        $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListShipmentContentUpdatePreviewsResponse';
        $request = $this->listShipmentContentUpdatePreviewsRequest(
            $inbound_plan_id,
            $shipment_id,
            $page_size,
            $pagination_token
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listShipmentContentUpdatePreviews'
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param int $page_size The number of content update previews to return. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws InvalidArgumentException
     */
    public function listShipmentContentUpdatePreviewsRequest(
        $inbound_plan_id,
        $shipment_id,
        $page_size = 10,
        $pagination_token = null
    ) {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling listShipmentContentUpdatePreviews'
            );
        }
        if (strlen($inbound_plan_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.listShipmentContentUpdatePreviews, must be smaller than or equal to 38.'
            );
        }
        if (strlen($inbound_plan_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.listShipmentContentUpdatePreviews, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inbound_plan_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"inbound_plan_id\" when calling FbaInboundApi.listShipmentContentUpdatePreviews, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling listShipmentContentUpdatePreviews'
            );
        }
        if (strlen($shipment_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$shipment_id" when calling FbaInboundApi.listShipmentContentUpdatePreviews, must be smaller than or equal to 38.'
            );
        }
        if (strlen($shipment_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$shipment_id" when calling FbaInboundApi.listShipmentContentUpdatePreviews, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $shipment_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"shipment_id\" when calling FbaInboundApi.listShipmentContentUpdatePreviews, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        if ($page_size !== null && $page_size > 20) {
            throw new InvalidArgumentException(
                'invalid value for "$page_size" when calling FbaInboundApi.listShipmentContentUpdatePreviews, must be smaller than or equal to 20.'
            );
        }
        if ($page_size !== null && $page_size < 1) {
            throw new InvalidArgumentException(
                'invalid value for "$page_size" when calling FbaInboundApi.listShipmentContentUpdatePreviews, must be bigger than or equal to 1.'
            );
        }

        if ($pagination_token !== null && strlen($pagination_token) > 1024) {
            throw new InvalidArgumentException(
                'invalid length for "$pagination_token" when calling FbaInboundApi.listShipmentContentUpdatePreviews, must be smaller than or equal to 1024.'
            );
        }
        if ($pagination_token !== null && strlen($pagination_token) < 0) {
            throw new InvalidArgumentException(
                'invalid length for "$pagination_token" when calling FbaInboundApi.listShipmentContentUpdatePreviews, must be bigger than or equal to 0.'
            );
        }


        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($page_size)) {
            $page_size = ObjectSerializer2024::serializeCollection($page_size, '', true);
        }
        if ($page_size !== null) {
            $queryParams['pageSize'] = $page_size;
        }
        // query params
        if (is_array($pagination_token)) {
            $pagination_token = ObjectSerializer2024::serializeCollection($pagination_token, '', true);
        }
        if ($pagination_token !== null) {
            $queryParams['paginationToken'] = $pagination_token;
        }


        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer2024::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }
        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer2024::toPathValue($shipment_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listShipmentItems
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param int $page_size The number of items to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return ListShipmentItemsResponse| ErrorList
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function listShipmentItems($inbound_plan_id, $shipment_id, $page_size = 10, $pagination_token = null)
    {
        list($response) = $this->listShipmentItemsWithHttpInfo(
            $inbound_plan_id,
            $shipment_id,
            $page_size,
            $pagination_token
        );
        return $response;
    }

    /**
     * Operation listShipmentItemsWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param int $page_size The number of items to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return array of \Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListShipmentItemsResponse|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function listShipmentItemsWithHttpInfo(
        $inbound_plan_id,
        $shipment_id,
        $page_size = 10,
        $pagination_token = null
    ) {
        $request = $this->listShipmentItemsRequest($inbound_plan_id, $shipment_id, $page_size, $pagination_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListShipmentItemsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListShipmentItemsResponse',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListShipmentItemsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string)$response->getBody();
            }

            return [
                ObjectSerializer2024::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListShipmentItemsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listShipmentItemsAsync
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param int $page_size The number of items to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function listShipmentItemsAsync($inbound_plan_id, $shipment_id, $page_size = 10, $pagination_token = null)
    {
        return $this->listShipmentItemsAsyncWithHttpInfo($inbound_plan_id, $shipment_id, $page_size, $pagination_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listShipmentItemsAsyncWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param int $page_size The number of items to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function listShipmentItemsAsyncWithHttpInfo(
        $inbound_plan_id,
        $shipment_id,
        $page_size = 10,
        $pagination_token = null
    ) {
        $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListShipmentItemsResponse';
        $request = $this->listShipmentItemsRequest($inbound_plan_id, $shipment_id, $page_size, $pagination_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listShipmentItems'
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param int $page_size The number of items to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws InvalidArgumentException
     */
    public function listShipmentItemsRequest($inbound_plan_id, $shipment_id, $page_size = 10, $pagination_token = null)
    {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling listShipmentItems'
            );
        }
        if (strlen($inbound_plan_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.listShipmentItems, must be smaller than or equal to 38.'
            );
        }
        if (strlen($inbound_plan_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.listShipmentItems, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inbound_plan_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"inbound_plan_id\" when calling FbaInboundApi.listShipmentItems, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling listShipmentItems'
            );
        }
        if (strlen($shipment_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$shipment_id" when calling FbaInboundApi.listShipmentItems, must be smaller than or equal to 38.'
            );
        }
        if (strlen($shipment_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$shipment_id" when calling FbaInboundApi.listShipmentItems, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $shipment_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"shipment_id\" when calling FbaInboundApi.listShipmentItems, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        if ($page_size !== null && $page_size > 1000) {
            throw new InvalidArgumentException(
                'invalid value for "$page_size" when calling FbaInboundApi.listShipmentItems, must be smaller than or equal to 1000.'
            );
        }
        if ($page_size !== null && $page_size < 1) {
            throw new InvalidArgumentException(
                'invalid value for "$page_size" when calling FbaInboundApi.listShipmentItems, must be bigger than or equal to 1.'
            );
        }

        if ($pagination_token !== null && strlen($pagination_token) > 1024) {
            throw new InvalidArgumentException(
                'invalid length for "$pagination_token" when calling FbaInboundApi.listShipmentItems, must be smaller than or equal to 1024.'
            );
        }
        if ($pagination_token !== null && strlen($pagination_token) < 0) {
            throw new InvalidArgumentException(
                'invalid length for "$pagination_token" when calling FbaInboundApi.listShipmentItems, must be bigger than or equal to 0.'
            );
        }


        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($page_size)) {
            $page_size = ObjectSerializer2024::serializeCollection($page_size, '', true);
        }
        if ($page_size !== null) {
            $queryParams['pageSize'] = $page_size;
        }
        // query params
        if (is_array($pagination_token)) {
            $pagination_token = ObjectSerializer2024::serializeCollection($pagination_token, '', true);
        }
        if ($pagination_token !== null) {
            $queryParams['paginationToken'] = $pagination_token;
        }


        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer2024::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }
        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer2024::toPathValue($shipment_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listShipmentPallets
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param int $page_size The number of pallets to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return ListShipmentPalletsResponse| ErrorList
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function listShipmentPallets($inbound_plan_id, $shipment_id, $page_size = 10, $pagination_token = null)
    {
        list($response) = $this->listShipmentPalletsWithHttpInfo(
            $inbound_plan_id,
            $shipment_id,
            $page_size,
            $pagination_token
        );
        return $response;
    }

    /**
     * Operation listShipmentPalletsWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param int $page_size The number of pallets to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return array of \Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListShipmentPalletsResponse|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function listShipmentPalletsWithHttpInfo(
        $inbound_plan_id,
        $shipment_id,
        $page_size = 10,
        $pagination_token = null
    ) {
        $request = $this->listShipmentPalletsRequest($inbound_plan_id, $shipment_id, $page_size, $pagination_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListShipmentPalletsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListShipmentPalletsResponse',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListShipmentPalletsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string)$response->getBody();
            }

            return [
                ObjectSerializer2024::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListShipmentPalletsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listShipmentPalletsAsync
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param int $page_size The number of pallets to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function listShipmentPalletsAsync($inbound_plan_id, $shipment_id, $page_size = 10, $pagination_token = null)
    {
        return $this->listShipmentPalletsAsyncWithHttpInfo(
            $inbound_plan_id,
            $shipment_id,
            $page_size,
            $pagination_token
        )
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listShipmentPalletsAsyncWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param int $page_size The number of pallets to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function listShipmentPalletsAsyncWithHttpInfo(
        $inbound_plan_id,
        $shipment_id,
        $page_size = 10,
        $pagination_token = null
    ) {
        $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListShipmentPalletsResponse';
        $request = $this->listShipmentPalletsRequest($inbound_plan_id, $shipment_id, $page_size, $pagination_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listShipmentPallets'
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param int $page_size The number of pallets to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws InvalidArgumentException
     */
    public function listShipmentPalletsRequest(
        $inbound_plan_id,
        $shipment_id,
        $page_size = 10,
        $pagination_token = null
    ) {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling listShipmentPallets'
            );
        }
        if (strlen($inbound_plan_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.listShipmentPallets, must be smaller than or equal to 38.'
            );
        }
        if (strlen($inbound_plan_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.listShipmentPallets, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inbound_plan_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"inbound_plan_id\" when calling FbaInboundApi.listShipmentPallets, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling listShipmentPallets'
            );
        }
        if (strlen($shipment_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$shipment_id" when calling FbaInboundApi.listShipmentPallets, must be smaller than or equal to 38.'
            );
        }
        if (strlen($shipment_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$shipment_id" when calling FbaInboundApi.listShipmentPallets, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $shipment_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"shipment_id\" when calling FbaInboundApi.listShipmentPallets, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        if ($page_size !== null && $page_size > 1000) {
            throw new InvalidArgumentException(
                'invalid value for "$page_size" when calling FbaInboundApi.listShipmentPallets, must be smaller than or equal to 1000.'
            );
        }
        if ($page_size !== null && $page_size < 1) {
            throw new InvalidArgumentException(
                'invalid value for "$page_size" when calling FbaInboundApi.listShipmentPallets, must be bigger than or equal to 1.'
            );
        }

        if ($pagination_token !== null && strlen($pagination_token) > 1024) {
            throw new InvalidArgumentException(
                'invalid length for "$pagination_token" when calling FbaInboundApi.listShipmentPallets, must be smaller than or equal to 1024.'
            );
        }
        if ($pagination_token !== null && strlen($pagination_token) < 0) {
            throw new InvalidArgumentException(
                'invalid length for "$pagination_token" when calling FbaInboundApi.listShipmentPallets, must be bigger than or equal to 0.'
            );
        }


        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/pallets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($page_size)) {
            $page_size = ObjectSerializer2024::serializeCollection($page_size, '', true);
        }
        if ($page_size !== null) {
            $queryParams['pageSize'] = $page_size;
        }
        // query params
        if (is_array($pagination_token)) {
            $pagination_token = ObjectSerializer2024::serializeCollection($pagination_token, '', true);
        }
        if ($pagination_token !== null) {
            $queryParams['paginationToken'] = $pagination_token;
        }


        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer2024::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }
        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer2024::toPathValue($shipment_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listTransportationOptions
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param int $page_size The number of transportation options to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     * @param string $placement_option_id The placement option to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified. (optional)
     * @param string $shipment_id The shipment to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified. (optional)
     *
     * @return ListTransportationOptionsResponse| ErrorList
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function listTransportationOptions(
        $inbound_plan_id,
        $page_size = 10,
        $pagination_token = null,
        $placement_option_id = null,
        $shipment_id = null
    ) {
        list($response) = $this->listTransportationOptionsWithHttpInfo(
            $inbound_plan_id,
            $page_size,
            $pagination_token,
            $placement_option_id,
            $shipment_id
        );
        return $response;
    }

    /**
     * Operation listTransportationOptionsWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param int $page_size The number of transportation options to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     * @param string $placement_option_id The placement option to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified. (optional)
     * @param string $shipment_id The shipment to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified. (optional)
     *
     * @return array of \Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListTransportationOptionsResponse|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function listTransportationOptionsWithHttpInfo(
        $inbound_plan_id,
        $page_size = 10,
        $pagination_token = null,
        $placement_option_id = null,
        $shipment_id = null
    ) {
        $request = $this->listTransportationOptionsRequest(
            $inbound_plan_id,
            $page_size,
            $pagination_token,
            $placement_option_id,
            $shipment_id
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListTransportationOptionsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListTransportationOptionsResponse',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListTransportationOptionsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string)$response->getBody();
            }

            return [
                ObjectSerializer2024::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListTransportationOptionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listTransportationOptionsAsync
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param int $page_size The number of transportation options to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     * @param string $placement_option_id The placement option to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified. (optional)
     * @param string $shipment_id The shipment to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function listTransportationOptionsAsync(
        $inbound_plan_id,
        $page_size = 10,
        $pagination_token = null,
        $placement_option_id = null,
        $shipment_id = null
    ) {
        return $this->listTransportationOptionsAsyncWithHttpInfo(
            $inbound_plan_id,
            $page_size,
            $pagination_token,
            $placement_option_id,
            $shipment_id
        )
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listTransportationOptionsAsyncWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param int $page_size The number of transportation options to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     * @param string $placement_option_id The placement option to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified. (optional)
     * @param string $shipment_id The shipment to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified. (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function listTransportationOptionsAsyncWithHttpInfo(
        $inbound_plan_id,
        $page_size = 10,
        $pagination_token = null,
        $placement_option_id = null,
        $shipment_id = null
    ) {
        $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ListTransportationOptionsResponse';
        $request = $this->listTransportationOptionsRequest(
            $inbound_plan_id,
            $page_size,
            $pagination_token,
            $placement_option_id,
            $shipment_id
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listTransportationOptions'
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param int $page_size The number of transportation options to return in the response matching the given query. (optional, default to 10)
     * @param string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     * @param string $placement_option_id The placement option to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified. (optional)
     * @param string $shipment_id The shipment to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified. (optional)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws InvalidArgumentException
     */
    public function listTransportationOptionsRequest(
        $inbound_plan_id,
        $page_size = 10,
        $pagination_token = null,
        $placement_option_id = null,
        $shipment_id = null
    ) {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling listTransportationOptions'
            );
        }
        if (strlen($inbound_plan_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.listTransportationOptions, must be smaller than or equal to 38.'
            );
        }
        if (strlen($inbound_plan_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.listTransportationOptions, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inbound_plan_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"inbound_plan_id\" when calling FbaInboundApi.listTransportationOptions, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        if ($page_size !== null && $page_size > 20) {
            throw new InvalidArgumentException(
                'invalid value for "$page_size" when calling FbaInboundApi.listTransportationOptions, must be smaller than or equal to 20.'
            );
        }
        if ($page_size !== null && $page_size < 1) {
            throw new InvalidArgumentException(
                'invalid value for "$page_size" when calling FbaInboundApi.listTransportationOptions, must be bigger than or equal to 1.'
            );
        }

        if ($pagination_token !== null && strlen($pagination_token) > 1024) {
            throw new InvalidArgumentException(
                'invalid length for "$pagination_token" when calling FbaInboundApi.listTransportationOptions, must be smaller than or equal to 1024.'
            );
        }
        if ($pagination_token !== null && strlen($pagination_token) < 0) {
            throw new InvalidArgumentException(
                'invalid length for "$pagination_token" when calling FbaInboundApi.listTransportationOptions, must be bigger than or equal to 0.'
            );
        }

        if ($placement_option_id !== null && strlen($placement_option_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$placement_option_id" when calling FbaInboundApi.listTransportationOptions, must be smaller than or equal to 38.'
            );
        }
        if ($placement_option_id !== null && strlen($placement_option_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$placement_option_id" when calling FbaInboundApi.listTransportationOptions, must be bigger than or equal to 38.'
            );
        }
        if ($placement_option_id !== null && !preg_match("/^[a-zA-Z0-9-]*$/", $placement_option_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"placement_option_id\" when calling FbaInboundApi.listTransportationOptions, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        if ($shipment_id !== null && strlen($shipment_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$shipment_id" when calling FbaInboundApi.listTransportationOptions, must be smaller than or equal to 38.'
            );
        }
        if ($shipment_id !== null && strlen($shipment_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$shipment_id" when calling FbaInboundApi.listTransportationOptions, must be bigger than or equal to 38.'
            );
        }
        if ($shipment_id !== null && !preg_match("/^[a-zA-Z0-9-]*$/", $shipment_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"shipment_id\" when calling FbaInboundApi.listTransportationOptions, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }


        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/transportationOptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($page_size)) {
            $page_size = ObjectSerializer2024::serializeCollection($page_size, '', true);
        }
        if ($page_size !== null) {
            $queryParams['pageSize'] = $page_size;
        }
        // query params
        if (is_array($pagination_token)) {
            $pagination_token = ObjectSerializer2024::serializeCollection($pagination_token, '', true);
        }
        if ($pagination_token !== null) {
            $queryParams['paginationToken'] = $pagination_token;
        }
        // query params
        if (is_array($placement_option_id)) {
            $placement_option_id = ObjectSerializer2024::serializeCollection($placement_option_id, '', true);
        }
        if ($placement_option_id !== null) {
            $queryParams['placementOptionId'] = $placement_option_id;
        }
        // query params
        if (is_array($shipment_id)) {
            $shipment_id = ObjectSerializer2024::serializeCollection($shipment_id, '', true);
        }
        if ($shipment_id !== null) {
            $queryParams['shipmentId'] = $shipment_id;
        }


        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer2024::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation scheduleSelfShipAppointment
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param string $slot_id An identifier to a self-ship appointment slot. (required)
     * @param ScheduleSelfShipAppointmentRequest $body The body of the request to &#x60;scheduleSelfShipAppointment&#x60;. (required)
     *
     * @return ScheduleSelfShipAppointmentResponse| ErrorList
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function scheduleSelfShipAppointment($inbound_plan_id, $shipment_id, $slot_id, $body)
    {
        list($response) = $this->scheduleSelfShipAppointmentWithHttpInfo(
            $inbound_plan_id,
            $shipment_id,
            $slot_id,
            $body
        );
        return $response;
    }

    /**
     * Operation scheduleSelfShipAppointmentWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param string $slot_id An identifier to a self-ship appointment slot. (required)
     * @param ScheduleSelfShipAppointmentRequest $body The body of the request to &#x60;scheduleSelfShipAppointment&#x60;. (required)
     *
     * @return array of \Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ScheduleSelfShipAppointmentResponse|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function scheduleSelfShipAppointmentWithHttpInfo($inbound_plan_id, $shipment_id, $slot_id, $body)
    {
        $request = $this->scheduleSelfShipAppointmentRequest($inbound_plan_id, $shipment_id, $slot_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ScheduleSelfShipAppointmentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ScheduleSelfShipAppointmentResponse',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ScheduleSelfShipAppointmentResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string)$response->getBody();
            }

            return [
                ObjectSerializer2024::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ScheduleSelfShipAppointmentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation scheduleSelfShipAppointmentAsync
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param string $slot_id An identifier to a self-ship appointment slot. (required)
     * @param ScheduleSelfShipAppointmentRequest $body The body of the request to &#x60;scheduleSelfShipAppointment&#x60;. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function scheduleSelfShipAppointmentAsync($inbound_plan_id, $shipment_id, $slot_id, $body)
    {
        return $this->scheduleSelfShipAppointmentAsyncWithHttpInfo($inbound_plan_id, $shipment_id, $slot_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation scheduleSelfShipAppointmentAsyncWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param string $slot_id An identifier to a self-ship appointment slot. (required)
     * @param ScheduleSelfShipAppointmentRequest $body The body of the request to &#x60;scheduleSelfShipAppointment&#x60;. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function scheduleSelfShipAppointmentAsyncWithHttpInfo($inbound_plan_id, $shipment_id, $slot_id, $body)
    {
        $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ScheduleSelfShipAppointmentResponse';
        $request = $this->scheduleSelfShipAppointmentRequest($inbound_plan_id, $shipment_id, $slot_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'scheduleSelfShipAppointment'
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param string $slot_id An identifier to a self-ship appointment slot. (required)
     * @param ScheduleSelfShipAppointmentRequest $body The body of the request to &#x60;scheduleSelfShipAppointment&#x60;. (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws InvalidArgumentException
     */
    public function scheduleSelfShipAppointmentRequest($inbound_plan_id, $shipment_id, $slot_id, $body)
    {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling scheduleSelfShipAppointment'
            );
        }
        if (strlen($inbound_plan_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.scheduleSelfShipAppointment, must be smaller than or equal to 38.'
            );
        }
        if (strlen($inbound_plan_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.scheduleSelfShipAppointment, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inbound_plan_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"inbound_plan_id\" when calling FbaInboundApi.scheduleSelfShipAppointment, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling scheduleSelfShipAppointment'
            );
        }
        if (strlen($shipment_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$shipment_id" when calling FbaInboundApi.scheduleSelfShipAppointment, must be smaller than or equal to 38.'
            );
        }
        if (strlen($shipment_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$shipment_id" when calling FbaInboundApi.scheduleSelfShipAppointment, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $shipment_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"shipment_id\" when calling FbaInboundApi.scheduleSelfShipAppointment, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'slot_id' is set
        if ($slot_id === null || (is_array($slot_id) && count($slot_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $slot_id when calling scheduleSelfShipAppointment'
            );
        }
        if (strlen($slot_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$slot_id" when calling FbaInboundApi.scheduleSelfShipAppointment, must be smaller than or equal to 38.'
            );
        }
        if (strlen($slot_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$slot_id" when calling FbaInboundApi.scheduleSelfShipAppointment, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $slot_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"slot_id\" when calling FbaInboundApi.scheduleSelfShipAppointment, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling scheduleSelfShipAppointment'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/selfShipAppointmentSlots/{slotId}/schedule';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer2024::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }
        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer2024::toPathValue($shipment_id),
                $resourcePath
            );
        }
        // path params
        if ($slot_id !== null) {
            $resourcePath = str_replace(
                '{' . 'slotId' . '}',
                ObjectSerializer2024::toPathValue($slot_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer2024::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setPackingInformation
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param SetPackingInformationRequest $body The body of the request to &#x60;setPackingInformation&#x60;. (required)
     *
     * @return SetPackingInformationResponse| ErrorList
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function setPackingInformation($inbound_plan_id, $body)
    {
        list($response) = $this->setPackingInformationWithHttpInfo($inbound_plan_id, $body);
        return $response;
    }

    /**
     * Operation setPackingInformationWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param SetPackingInformationRequest $body The body of the request to &#x60;setPackingInformation&#x60;. (required)
     *
     * @return array of \Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\SetPackingInformationResponse|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function setPackingInformationWithHttpInfo($inbound_plan_id, $body)
    {
        $request = $this->setPackingInformationRequest($inbound_plan_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            switch ($statusCode) {
                case 202:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\SetPackingInformationResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\SetPackingInformationResponse',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\SetPackingInformationResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string)$response->getBody();
            }

            return [
                ObjectSerializer2024::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\SetPackingInformationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setPackingInformationAsync
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param SetPackingInformationRequest $body The body of the request to &#x60;setPackingInformation&#x60;. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function setPackingInformationAsync($inbound_plan_id, $body)
    {
        return $this->setPackingInformationAsyncWithHttpInfo($inbound_plan_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setPackingInformationAsyncWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param SetPackingInformationRequest $body The body of the request to &#x60;setPackingInformation&#x60;. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function setPackingInformationAsyncWithHttpInfo($inbound_plan_id, $body)
    {
        $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\SetPackingInformationResponse';
        $request = $this->setPackingInformationRequest($inbound_plan_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setPackingInformation'
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param SetPackingInformationRequest $body The body of the request to &#x60;setPackingInformation&#x60;. (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws InvalidArgumentException
     */
    public function setPackingInformationRequest($inbound_plan_id, $body)
    {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling setPackingInformation'
            );
        }
        if (strlen($inbound_plan_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.setPackingInformation, must be smaller than or equal to 38.'
            );
        }
        if (strlen($inbound_plan_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.setPackingInformation, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inbound_plan_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"inbound_plan_id\" when calling FbaInboundApi.setPackingInformation, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling setPackingInformation'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingInformation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer2024::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer2024::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateInboundPlanName
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param UpdateInboundPlanNameRequest $body The body of the request to &#x60;updateInboundPlanName&#x60;. (required)
     *
     * @return void
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function updateInboundPlanName($inbound_plan_id, $body)
    {
        $this->updateInboundPlanNameWithHttpInfo($inbound_plan_id, $body);
    }

    /**
     * Operation updateInboundPlanNameWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param UpdateInboundPlanNameRequest $body The body of the request to &#x60;updateInboundPlanName&#x60;. (required)
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function updateInboundPlanNameWithHttpInfo($inbound_plan_id, $body)
    {
        $request = $this->updateInboundPlanNameRequest($inbound_plan_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateInboundPlanNameAsync
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param UpdateInboundPlanNameRequest $body The body of the request to &#x60;updateInboundPlanName&#x60;. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function updateInboundPlanNameAsync($inbound_plan_id, $body)
    {
        return $this->updateInboundPlanNameAsyncWithHttpInfo($inbound_plan_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateInboundPlanNameAsyncWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param UpdateInboundPlanNameRequest $body The body of the request to &#x60;updateInboundPlanName&#x60;. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function updateInboundPlanNameAsyncWithHttpInfo($inbound_plan_id, $body)
    {
        $returnType = '';
        $request = $this->updateInboundPlanNameRequest($inbound_plan_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateInboundPlanName'
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param UpdateInboundPlanNameRequest $body The body of the request to &#x60;updateInboundPlanName&#x60;. (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws InvalidArgumentException
     */
    public function updateInboundPlanNameRequest($inbound_plan_id, $body)
    {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling updateInboundPlanName'
            );
        }
        if (strlen($inbound_plan_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.updateInboundPlanName, must be smaller than or equal to 38.'
            );
        }
        if (strlen($inbound_plan_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.updateInboundPlanName, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inbound_plan_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"inbound_plan_id\" when calling FbaInboundApi.updateInboundPlanName, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling updateInboundPlanName'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/name';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer2024::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer2024::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateItemComplianceDetails
     *
     * @param string $marketplace_id The Marketplace ID. Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) for a list of possible values. (required)
     * @param UpdateItemComplianceDetailsRequest $body The body of the request to &#x60;updateItemComplianceDetails&#x60;. (required)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return UpdateItemComplianceDetailsResponse| ErrorList
     */
    public function updateItemComplianceDetails($marketplace_id, $body)
    {
        list($response) = $this->updateItemComplianceDetailsWithHttpInfo($marketplace_id, $body);
        return $response;
    }

    /**
     * Operation updateItemComplianceDetailsWithHttpInfo
     *
     * @param string $marketplace_id The Marketplace ID. Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) for a list of possible values. (required)
     * @param UpdateItemComplianceDetailsRequest $body The body of the request to &#x60;updateItemComplianceDetails&#x60;. (required)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of \Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\UpdateItemComplianceDetailsResponse|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateItemComplianceDetailsWithHttpInfo($marketplace_id, $body)
    {
        $request = $this->updateItemComplianceDetailsRequest($marketplace_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            switch ($statusCode) {
                case 202:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\UpdateItemComplianceDetailsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\UpdateItemComplianceDetailsResponse',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\UpdateItemComplianceDetailsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string)$response->getBody();
            }

            return [
                ObjectSerializer2024::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\UpdateItemComplianceDetailsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateItemComplianceDetailsAsync
     *
     * @param string $marketplace_id The Marketplace ID. Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) for a list of possible values. (required)
     * @param UpdateItemComplianceDetailsRequest $body The body of the request to &#x60;updateItemComplianceDetails&#x60;. (required)
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateItemComplianceDetailsAsync($marketplace_id, $body)
    {
        return $this->updateItemComplianceDetailsAsyncWithHttpInfo($marketplace_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateItemComplianceDetailsAsyncWithHttpInfo
     *
     * @param string $marketplace_id The Marketplace ID. Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) for a list of possible values. (required)
     * @param UpdateItemComplianceDetailsRequest $body The body of the request to &#x60;updateItemComplianceDetails&#x60;. (required)
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateItemComplianceDetailsAsyncWithHttpInfo($marketplace_id, $body)
    {
        $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\UpdateItemComplianceDetailsResponse';
        $request = $this->updateItemComplianceDetailsRequest($marketplace_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateItemComplianceDetails'
     *
     * @param string $marketplace_id The Marketplace ID. Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) for a list of possible values. (required)
     * @param UpdateItemComplianceDetailsRequest $body The body of the request to &#x60;updateItemComplianceDetails&#x60;. (required)
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateItemComplianceDetailsRequest($marketplace_id, $body)
    {
        // verify the required parameter 'marketplace_id' is set
        if ($marketplace_id === null || (is_array($marketplace_id) && count($marketplace_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $marketplace_id when calling updateItemComplianceDetails'
            );
        }
        if (strlen($marketplace_id) > 256) {
            throw new InvalidArgumentException(
                'invalid length for "$marketplace_id" when calling FbaInboundApi.updateItemComplianceDetails, must be smaller than or equal to 256.'
            );
        }
        if (strlen($marketplace_id) < 1) {
            throw new InvalidArgumentException(
                'invalid length for "$marketplace_id" when calling FbaInboundApi.updateItemComplianceDetails, must be bigger than or equal to 1.'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling updateItemComplianceDetails'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/items/compliance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($marketplace_id)) {
            $marketplace_id = ObjectSerializer2024::serializeCollection($marketplace_id, '', true);
        }
        if ($marketplace_id !== null) {
            $queryParams['marketplaceId'] = $marketplace_id;
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer2024::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateShipmentName
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param UpdateShipmentNameRequest $body The body of the request to &#x60;updateShipmentName&#x60;. (required)
     *
     * @return void
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function updateShipmentName($inbound_plan_id, $shipment_id, $body)
    {
        $this->updateShipmentNameWithHttpInfo($inbound_plan_id, $shipment_id, $body);
    }

    /**
     * Operation updateShipmentNameWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param UpdateShipmentNameRequest $body The body of the request to &#x60;updateShipmentName&#x60;. (required)
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function updateShipmentNameWithHttpInfo($inbound_plan_id, $shipment_id, $body)
    {
        $request = $this->updateShipmentNameRequest($inbound_plan_id, $shipment_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateShipmentNameAsync
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param UpdateShipmentNameRequest $body The body of the request to &#x60;updateShipmentName&#x60;. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function updateShipmentNameAsync($inbound_plan_id, $shipment_id, $body)
    {
        return $this->updateShipmentNameAsyncWithHttpInfo($inbound_plan_id, $shipment_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateShipmentNameAsyncWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param UpdateShipmentNameRequest $body The body of the request to &#x60;updateShipmentName&#x60;. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function updateShipmentNameAsyncWithHttpInfo($inbound_plan_id, $shipment_id, $body)
    {
        $returnType = '';
        $request = $this->updateShipmentNameRequest($inbound_plan_id, $shipment_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateShipmentName'
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param UpdateShipmentNameRequest $body The body of the request to &#x60;updateShipmentName&#x60;. (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws InvalidArgumentException
     */
    public function updateShipmentNameRequest($inbound_plan_id, $shipment_id, $body)
    {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling updateShipmentName'
            );
        }
        if (strlen($inbound_plan_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.updateShipmentName, must be smaller than or equal to 38.'
            );
        }
        if (strlen($inbound_plan_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.updateShipmentName, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inbound_plan_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"inbound_plan_id\" when calling FbaInboundApi.updateShipmentName, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling updateShipmentName'
            );
        }
        if (strlen($shipment_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$shipment_id" when calling FbaInboundApi.updateShipmentName, must be smaller than or equal to 38.'
            );
        }
        if (strlen($shipment_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$shipment_id" when calling FbaInboundApi.updateShipmentName, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $shipment_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"shipment_id\" when calling FbaInboundApi.updateShipmentName, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling updateShipmentName'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/name';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer2024::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }
        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer2024::toPathValue($shipment_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer2024::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateShipmentSourceAddress
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param UpdateShipmentSourceAddressRequest $body The body of the request to &#x60;updateShipmentSourceAddress&#x60;. (required)
     *
     * @return UpdateShipmentSourceAddressResponse| ErrorList
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function updateShipmentSourceAddress($inbound_plan_id, $shipment_id, $body)
    {
        list($response) = $this->updateShipmentSourceAddressWithHttpInfo($inbound_plan_id, $shipment_id, $body);
        return $response;
    }

    /**
     * Operation updateShipmentSourceAddressWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param UpdateShipmentSourceAddressRequest $body The body of the request to &#x60;updateShipmentSourceAddress&#x60;. (required)
     *
     * @return array of \Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\UpdateShipmentSourceAddressResponse|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function updateShipmentSourceAddressWithHttpInfo($inbound_plan_id, $shipment_id, $body)
    {
        $request = $this->updateShipmentSourceAddressRequest($inbound_plan_id, $shipment_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            switch ($statusCode) {
                case 202:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\UpdateShipmentSourceAddressResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\UpdateShipmentSourceAddressResponse',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\UpdateShipmentSourceAddressResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string)$response->getBody();
            }

            return [
                ObjectSerializer2024::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\UpdateShipmentSourceAddressResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateShipmentSourceAddressAsync
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param UpdateShipmentSourceAddressRequest $body The body of the request to &#x60;updateShipmentSourceAddress&#x60;. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function updateShipmentSourceAddressAsync($inbound_plan_id, $shipment_id, $body)
    {
        return $this->updateShipmentSourceAddressAsyncWithHttpInfo($inbound_plan_id, $shipment_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateShipmentSourceAddressAsyncWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param UpdateShipmentSourceAddressRequest $body The body of the request to &#x60;updateShipmentSourceAddress&#x60;. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function updateShipmentSourceAddressAsyncWithHttpInfo($inbound_plan_id, $shipment_id, $body)
    {
        $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\UpdateShipmentSourceAddressResponse';
        $request = $this->updateShipmentSourceAddressRequest($inbound_plan_id, $shipment_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateShipmentSourceAddress'
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param UpdateShipmentSourceAddressRequest $body The body of the request to &#x60;updateShipmentSourceAddress&#x60;. (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws InvalidArgumentException
     */
    public function updateShipmentSourceAddressRequest($inbound_plan_id, $shipment_id, $body)
    {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling updateShipmentSourceAddress'
            );
        }
        if (strlen($inbound_plan_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.updateShipmentSourceAddress, must be smaller than or equal to 38.'
            );
        }
        if (strlen($inbound_plan_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.updateShipmentSourceAddress, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inbound_plan_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"inbound_plan_id\" when calling FbaInboundApi.updateShipmentSourceAddress, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling updateShipmentSourceAddress'
            );
        }
        if (strlen($shipment_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$shipment_id" when calling FbaInboundApi.updateShipmentSourceAddress, must be smaller than or equal to 38.'
            );
        }
        if (strlen($shipment_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$shipment_id" when calling FbaInboundApi.updateShipmentSourceAddress, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $shipment_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"shipment_id\" when calling FbaInboundApi.updateShipmentSourceAddress, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling updateShipmentSourceAddress'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/sourceAddress';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer2024::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }
        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer2024::toPathValue($shipment_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer2024::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateShipmentTrackingDetails
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param UpdateShipmentTrackingDetailsRequest $body The body of the request to &#x60;updateShipmentTrackingDetails&#x60;. (required)
     *
     * @return UpdateShipmentTrackingDetailsResponse| ErrorList
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function updateShipmentTrackingDetails($inbound_plan_id, $shipment_id, $body)
    {
        list($response) = $this->updateShipmentTrackingDetailsWithHttpInfo($inbound_plan_id, $shipment_id, $body);
        return $response;
    }

    /**
     * Operation updateShipmentTrackingDetailsWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param UpdateShipmentTrackingDetailsRequest $body The body of the request to &#x60;updateShipmentTrackingDetails&#x60;. (required)
     *
     * @return array of \Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\UpdateShipmentTrackingDetailsResponse|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList|\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function updateShipmentTrackingDetailsWithHttpInfo($inbound_plan_id, $shipment_id, $body)
    {
        $request = $this->updateShipmentTrackingDetailsRequest($inbound_plan_id, $shipment_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int)$e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string)$e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string)$request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string)$response->getBody()
                );
            }

            switch ($statusCode) {
                case 202:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\UpdateShipmentTrackingDetailsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\UpdateShipmentTrackingDetailsResponse',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                case 503:
                case 500:
                case 429:
                case 415:
                case 404:
                case 403:
                case 400:
                    if ('\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize(
                            $content,
                            '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\UpdateShipmentTrackingDetailsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string)$response->getBody();
            }

            return [
                ObjectSerializer2024::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\UpdateShipmentTrackingDetailsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                case 500:
                case 429:
                case 415:
                case 413:
                case 404:
                case 403:
                case 400:
                    $data = ObjectSerializer2024::deserialize(
                        $e->getResponseBody(),
                        '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateShipmentTrackingDetailsAsync
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param UpdateShipmentTrackingDetailsRequest $body The body of the request to &#x60;updateShipmentTrackingDetails&#x60;. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function updateShipmentTrackingDetailsAsync($inbound_plan_id, $shipment_id, $body)
    {
        return $this->updateShipmentTrackingDetailsAsyncWithHttpInfo($inbound_plan_id, $shipment_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateShipmentTrackingDetailsAsyncWithHttpInfo
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param UpdateShipmentTrackingDetailsRequest $body The body of the request to &#x60;updateShipmentTrackingDetails&#x60;. (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function updateShipmentTrackingDetailsAsyncWithHttpInfo($inbound_plan_id, $shipment_id, $body)
    {
        $returnType = '\Plenty\AmazonPHP\SellingPartner\Model\FulfillmentInbound2024\UpdateShipmentTrackingDetailsResponse';
        $request = $this->updateShipmentTrackingDetailsRequest($inbound_plan_id, $shipment_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string)$response->getBody();
                    }

                    return [
                        ObjectSerializer2024::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string)$response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateShipmentTrackingDetails'
     *
     * @param string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param UpdateShipmentTrackingDetailsRequest $body The body of the request to &#x60;updateShipmentTrackingDetails&#x60;. (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws InvalidArgumentException
     */
    public function updateShipmentTrackingDetailsRequest($inbound_plan_id, $shipment_id, $body)
    {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling updateShipmentTrackingDetails'
            );
        }
        if (strlen($inbound_plan_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.updateShipmentTrackingDetails, must be smaller than or equal to 38.'
            );
        }
        if (strlen($inbound_plan_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$inbound_plan_id" when calling FbaInboundApi.updateShipmentTrackingDetails, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $inbound_plan_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"inbound_plan_id\" when calling FbaInboundApi.updateShipmentTrackingDetails, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling updateShipmentTrackingDetails'
            );
        }
        if (strlen($shipment_id) > 38) {
            throw new InvalidArgumentException(
                'invalid length for "$shipment_id" when calling FbaInboundApi.updateShipmentTrackingDetails, must be smaller than or equal to 38.'
            );
        }
        if (strlen($shipment_id) < 38) {
            throw new InvalidArgumentException(
                'invalid length for "$shipment_id" when calling FbaInboundApi.updateShipmentTrackingDetails, must be bigger than or equal to 38.'
            );
        }
        if (!preg_match("/^[a-zA-Z0-9-]*$/", $shipment_id)) {
            throw new InvalidArgumentException(
                "invalid value for \"shipment_id\" when calling FbaInboundApi.updateShipmentTrackingDetails, must conform to the pattern /^[a-zA-Z0-9-]*$/."
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling updateShipmentTrackingDetails'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/trackingDetails';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer2024::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }
        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer2024::toPathValue($shipment_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer2024::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @return array of http client options
     * @throws RuntimeException on file opening failure
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
